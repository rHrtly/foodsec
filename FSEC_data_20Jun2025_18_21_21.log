-------------------------------------------------------------------------------------------------------------------
      name:  FSEC
       log:  G:\My Drive\Interchange\Research\FoodSec\FSEC_data_20Jun2025_18_21_21.log
  log type:  text
 opened on:  20 Jun 2025, 18:21:21

. 
. /*******************************************************************************
> ********************************************************************************
> 
>   "The Persistence of Food Security Status Across Generations"
>   
>         Robert Paul Hartley
>         Jaehyun Nam
>         Christopher Wimer
>         
>         February 2024
>         
> ********************************************************************************
> *******************************************************************************/
. 
. **# Data setup
. ********************************************************************************
. 
. use "${psidpath}\PSID_intergenerational.dta", clear
(PSID Intergenerational File)

. drop if YEAR < 1994
(1,823,688 observations deleted)

. 
. /* Merge in Child Development Supplement (CDS) data */
. sort ID SURVEYYEAR

. merge 1:1 ID SURVEYYEAR using "${psidpath}\PSID_CDS_extract.dta", update         ///
>         assert(1 2 3) gen(merge_cds2)
(label _merge already defined)

    Result                      Number of obs
    -----------------------------------------
    Not matched                     1,777,218
        from master                 1,769,892  (merge_cds2==1)
        from using                      7,326  (merge_cds2==2)

    Matched                            53,796
        not updated                    53,796  (merge_cds2==3)
        missing updated                     0  (merge_cds2==4)
        nonmissing conflict                 0  (merge_cds2==5)
    -----------------------------------------

. label variable merge_cds2 "Merger results (3): CDS data"

. tab SURVEYYEAR merge_cds2, miss

      PSID |
    survey |   Merger results (3): CDS data
      year | Master on  Using onl  Matched ( |     Total
-----------+---------------------------------+----------
      1995 |    67,544          0          0 |    67,544 
      1996 |    67,544          0          0 |    67,544 
      1997 |    58,578      1,221      8,966 |    68,765 
      1998 |    67,544          0          0 |    67,544 
      1999 |    67,544          0          0 |    67,544 
      2000 |    67,544          0          0 |    67,544 
      2001 |    67,544          0          0 |    67,544 
      2002 |    58,578      1,221      8,966 |    68,765 
      2003 |    67,544          0          0 |    67,544 
      2004 |    67,544          0          0 |    67,544 
      2005 |    67,544          0          0 |    67,544 
      2006 |    67,544          0          0 |    67,544 
      2007 |    58,578      1,221      8,966 |    68,765 
      2008 |    67,544          0          0 |    67,544 
      2009 |    67,544          0          0 |    67,544 
      2010 |    67,544          0          0 |    67,544 
      2011 |    67,544          0          0 |    67,544 
      2012 |    67,544          0          0 |    67,544 
      2013 |    67,544          0          0 |    67,544 
      2014 |    58,578      1,221      8,966 |    68,765 
      2015 |    67,544          0          0 |    67,544 
      2016 |    67,544          0          0 |    67,544 
      2017 |    67,544          0          0 |    67,544 
      2018 |    67,544          0          0 |    67,544 
      2019 |    58,578      1,221      8,966 |    68,765 
      2020 |    58,578      1,221      8,966 |    68,765 
      2021 |    67,544          0          0 |    67,544 
-----------+---------------------------------+----------
     Total | 1,769,892      7,326     53,796 | 1,831,014 

. drop if merge_cds2 == 2
(7,326 observations deleted)

. 
. sort FID SURVEYYEAR

. merge m:1 FID SURVEYYEAR using "${path}\FAM_FoodSufficiency.dta", nogen          ///
>         keep(1 3)

    Result                      Number of obs
    -----------------------------------------
    Not matched                     1,716,628
        from master                 1,716,628  
        from using                          0  

    Matched                           107,060  
    -----------------------------------------

. 
. sort ID SURVEYYEAR

. merge 1:1 ID SURVEYYEAR using "${path}\CDS_FoodSufficiency.dta", nogen keep(1 3)
(label CDS_FOODSUFFICIENCY_la already defined)
(label CDS_FOODSUFFWHY_la already defined)

    Result                      Number of obs
    -----------------------------------------
    Not matched                     1,820,454
        from master                 1,820,454  
        from using                          0  

    Matched                             3,234  
    -----------------------------------------

. 
. drop ORIGINAL_* *_cspp_S CAH_* SE_* SU_* HU_* HE_* covid* COVID_* exp* EXP_* ///
>         HOME_* merge*

. 
. /* Merge in race/ethnicity information from panel imputations */
. sort ID SURVEYYEAR

. merge 1:1 ID SURVEYYEAR using "${psidpath}\PSID_raceth.dta", update replace      ///
>         gen(merge_race)

    Result                      Number of obs
    -----------------------------------------
    Not matched                     1,823,688
        from master                         0  (merge_race==1)
        from using                  1,823,688  (merge_race==2)

    Matched                         1,823,688
        not updated                 1,823,688  (merge_race==3)
        missing updated                     0  (merge_race==4)
        nonmissing conflict                 0  (merge_race==5)
    -----------------------------------------

. label variable merge_race "Merger results (4): TAS data"

. tab SURVEYYEAR merge_race, miss

      PSID |  Merger results (4):
    survey |       TAS data
      year | Using onl  Matched ( |     Total
-----------+----------------------+----------
      1968 |    67,544          0 |    67,544 
      1969 |    67,544          0 |    67,544 
      1970 |    67,544          0 |    67,544 
      1971 |    67,544          0 |    67,544 
      1972 |    67,544          0 |    67,544 
      1973 |    67,544          0 |    67,544 
      1974 |    67,544          0 |    67,544 
      1975 |    67,544          0 |    67,544 
      1976 |    67,544          0 |    67,544 
      1977 |    67,544          0 |    67,544 
      1978 |    67,544          0 |    67,544 
      1979 |    67,544          0 |    67,544 
      1980 |    67,544          0 |    67,544 
      1981 |    67,544          0 |    67,544 
      1982 |    67,544          0 |    67,544 
      1983 |    67,544          0 |    67,544 
      1984 |    67,544          0 |    67,544 
      1985 |    67,544          0 |    67,544 
      1986 |    67,544          0 |    67,544 
      1987 |    67,544          0 |    67,544 
      1988 |    67,544          0 |    67,544 
      1989 |    67,544          0 |    67,544 
      1990 |    67,544          0 |    67,544 
      1991 |    67,544          0 |    67,544 
      1992 |    67,544          0 |    67,544 
      1993 |    67,544          0 |    67,544 
      1994 |    67,544          0 |    67,544 
      1995 |         0     67,544 |    67,544 
      1996 |         0     67,544 |    67,544 
      1997 |         0     67,544 |    67,544 
      1998 |         0     67,544 |    67,544 
      1999 |         0     67,544 |    67,544 
      2000 |         0     67,544 |    67,544 
      2001 |         0     67,544 |    67,544 
      2002 |         0     67,544 |    67,544 
      2003 |         0     67,544 |    67,544 
      2004 |         0     67,544 |    67,544 
      2005 |         0     67,544 |    67,544 
      2006 |         0     67,544 |    67,544 
      2007 |         0     67,544 |    67,544 
      2008 |         0     67,544 |    67,544 
      2009 |         0     67,544 |    67,544 
      2010 |         0     67,544 |    67,544 
      2011 |         0     67,544 |    67,544 
      2012 |         0     67,544 |    67,544 
      2013 |         0     67,544 |    67,544 
      2014 |         0     67,544 |    67,544 
      2015 |         0     67,544 |    67,544 
      2016 |         0     67,544 |    67,544 
      2017 |         0     67,544 |    67,544 
      2018 |         0     67,544 |    67,544 
      2019 |         0     67,544 |    67,544 
      2020 |         0     67,544 |    67,544 
      2021 |         0     67,544 |    67,544 
-----------+----------------------+----------
     Total | 1,823,688  1,823,688 | 3,647,376 

. drop if merge_race == 2
(1,823,688 observations deleted)

. 
. recode SURVEYYEAR (1997 1999 2001 2003 = 1 "Childhood")                                          ///
>         (2005 2007 2009 2011 2013 = 2 "Middle years")                                                    ///
>         (2014 2015 2017 2019 2020 2021 = 3 "Adulthood")                                                  ///
>         (else = .), gen(yearcats)
(1,823,688 differences between SURVEYYEAR and yearcats)

. label variable yearcats "Survey years categorized by observation period"

. 
. **# Food security module items and raw score
. ********************************************************************************
. 
. forvalues i = 1/18 {
  2.         
.         if (`i' < 10) local i = "0`i'"
  3.         vlist FSEC`i'_?*
  4.         local fs `r(vlist)'
  5.         
.         clonevar r_FOOD`i' = `fs'
  6.         replace r_FOOD`i' = inlist(FOOD`i', 1, 2) if !inlist(FOOD`i', 8, 9) &    ///
>                 FOOD`i' != . & r_FOOD`i' == .
  7.         replace r_FOOD`i' = inlist(CDS_FOOD`i', 1, 2)                                                    ///
>                 if inlist(SURVEYYEAR, 1997, 2014) & !inlist(CDS_FOOD`i', 8, 9) &         ///
>                 CDS_FOOD`i' != . & r_FOOD`i' == .
  8.         
.         tempvar fi FI
  9.         g `fi' = CDS_`fs' if SURVEYYEAR == 2019
 10.         bysort ID (SURVEYYEAR): egen `FI' = max(`fi')
 11.         replace r_FOOD`i' = `FI' if SURVEYYEAR == 2020 & r_FOOD`i' == .
 12.         drop `fi' `FI'
 13.         
.         tempvar rf
 14.         bysort FID SURVEYYEAR: egen `rf' = max(r_FOOD`i') if !inlist(FID, 0, .)
 15.         replace r_FOOD`i' = `rf'
 16.         drop `rf'
 17.         
. }
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,534 missing values generated)
(27,642 real changes made, 556 to missing)
(1,620,055 missing values generated)
(89,080 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,493,454 missing values generated)
(27,638 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,534 missing values generated)
(27,641 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,118 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,525 missing values generated)
(27,644 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,128 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,500 missing values generated)
(27,658 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,518 missing values generated)
(27,657 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,518 missing values generated)
(27,648 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,119 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,528 missing values generated)
(27,634 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,122 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,507 missing values generated)
(27,650 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,129 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,493 missing values generated)
(27,655 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,123 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,502 missing values generated)
(27,666 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,123 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,502 missing values generated)
(27,660 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,516 missing values generated)
(27,647 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,553 missing values generated)
(27,603 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,120 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,553 missing values generated)
(27,603 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,129 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,493 missing values generated)
(27,654 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,118 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,583 missing values generated)
(27,578 real changes made, 556 to missing)
(1,620,055 missing values generated)
(0 real changes made)
(7,118 real changes made)
(1,819,796 missing values generated)
(1,718,604 missing values generated)
(3,892 real changes made)
(1,582,583 missing values generated)
(27,574 real changes made, 556 to missing)

. 
. drop FOOD01-FOOD18

. rename r_FOOD?? FOOD??

. 
. egen FSRAW = rowtotal(FOOD01 FOOD02 FOOD03 FOOD04 FOOD05 FOOD06 FOOD07           ///
>         FOOD08 FOOD09 FOOD10 FOOD11 FOOD12 FOOD13 FOOD14 FOOD15 FOOD16 FOOD17    ///
>         FOOD18) if SURVEYYEAR >= 1997, miss
(1,582,484 missing values generated)

. label variable FSRAW "Food security raw score"

. 
. egen FSCHRAW = rowtotal(FOOD11 FOOD12 FOOD13 FOOD14 FOOD15 FOOD16 FOOD17         ///
>         FOOD18) if SURVEYYEAR >= 1997, miss
(1,582,484 missing values generated)

. label variable FSCHRAW "Food security child-specific raw score"

. 
. replace FSECCHHO = CDS_FSECCHHO if FSECCHHO == . & FSRAW != . &                          ///
>         SURVEYYEAR < 2019
(11,419 real changes made)

. tempvar fi FI

. g `fi' = CDS_FSECCHHO if SURVEYYEAR == 2019
(1,814,722 missing values generated)

. bysort ID (SURVEYYEAR): egen `FI' = max(`fi')
(1,581,606 missing values generated)

. replace FSECCHHO = `FI' if SURVEYYEAR == 2020 & FSECCHHO == .
(8,966 real changes made)

. drop `fi' `FI'

. tab SURVEYYEAR FSECCHHO

      PSID |  FOOD SECURITY-CHILD
    survey |     IN HOUSEHOLD
      year | Household  Household |     Total
-----------+----------------------+----------
      1997 |         0      6,449 |     6,449 
      1999 |    29,638      6,683 |    36,321 
      2001 |    30,056      5,728 |    35,784 
      2003 |    11,259     23,696 |    34,955 
      2014 |         0      4,970 |     4,970 
      2015 |    11,318     15,314 |    26,632 
      2017 |    10,805     14,514 |    25,319 
      2019 |    10,059     13,473 |    23,532 
      2020 |         0      8,966 |     8,966 
      2021 |     9,172     11,918 |    21,090 
-----------+----------------------+----------
     Total |   112,307    111,711 |   224,018 

. 
. **# Sample definitions
. ********************************************************************************
. 
. bysort ID (SURVEYYEAR): egen Child_N = total(FSRAW != . & yearcats == 1 &        ///
>         AGE < 18 & FamUnit > 0 & !inlist(CLWT, 0, .) & inlist(SURVEY, 1, 2) &    ///
>         YOB >= 1985 & YOB <= 1997)

. bysort ID (SURVEYYEAR): egen Adult_N = total(FSRAW != . & yearcats == 3 &        ///
>         AGE >= 18 & Adult == 1 & FamUnit > 0 & !inlist(CLWT, 0, .) &                     ///
>         inlist(SURVEY, 1, 2) & YOB >= 1985 & YOB <= 1997)

. mark touse_any if Child_N >= 2 & Adult_N >= 2

. label variable touse_any "At least 2 child and adult observations, respectively"

. 
. bysort ID (SURVEYYEAR): egen CT_X = total(FSRAW != . & yearcats == 1)

. mark touse_cohort if YOB >= 1985 & YOB <= 1997 & yearcats != 0 &                         ///
>         inlist(SURVEY, 1, 2) & !inlist(CLWT, ., 0) & CT_X > 2

. label variable touse_cohort                                                                                      
>                 ///
>         "Born from 1985 through 1997, with more than 2 child observations"

. 
. mark touse_ad if AGE >= 18 & Adult == 1 & FamUnit > 0 & touse_cohort == 1 &      ///
>         yearcats == 3 & FSRAW != . & !inlist(CLWT, ., 0)

. bysort ID (SURVEYYEAR): egen CT_Y = total(touse_ad)

. replace touse_ad = 0 if CT_Y < 2 & SURVEYYEAR < 2019
(81 real changes made)

. label variable touse_ad "Cohort sample with at least 2 adult observations"

. 
. mark touse_ac if touse_ad == 1 & FamUnit_NCU18 > 0 & FamUnit_NCU18 != .

. replace touse_ac = 0 if touse_ad == 0
(0 real changes made)

. label variable touse_ac                                                                                          
>                 ///
>         "Cohort sample with at least 2 adult observations, when children present"

. 
. **# Core food security categorical and indicator variables
. ********************************************************************************
. 
. recode HHFSEC (9 = .)
(0 changes made to HHFSEC)

. recode FSRAW (0=1 "Secure")(1/2=2 "Marginally insecure")(3/7=3 "Low secure") ///
>         (8/18=4 "Very low secure"), g(FScats)
(222,440 differences between FSRAW and FScats)

. replace FScats = 4 if inlist(FSRAW, 6, 7) & FSECCHHO == 0
(1,856 real changes made)

. tab FScats HHFSEC if FSECCHHO == 0, miss

    RECODE of FSRAW |
 (Food security raw |   HOUSEHOLD FOOD SECURITY STATUS CATEGORY
             score) | High Food  Marginal   Low Food   Very Low  |     Total
--------------------+--------------------------------------------+----------
             Secure |    98,223          0          0          0 |    98,223 
Marginally insecure |         0      6,348          0          0 |     6,348 
         Low secure |         0          0      4,302          0 |     4,302 
    Very low secure |         0          0          0      3,434 |     3,434 
--------------------+--------------------------------------------+----------
              Total |    98,223      6,348      4,302      3,434 |   112,307 

. tab FScats HHFSEC if FSECCHHO == 1, miss

    RECODE of FSRAW |
 (Food security raw |        HOUSEHOLD FOOD SECURITY STATUS CATEGORY
             score) | High Food  Marginal   Low Food   Very Low           . |     Total
--------------------+-------------------------------------------------------+----------
             Secure |    56,449          0          0          0     10,996 |    67,445 
Marginally insecure |         0     16,280          0          0      1,956 |    18,236 
         Low secure |         0          0     13,033          0      1,860 |    14,893 
    Very low secure |         0          0          0      5,564        942 |     6,506 
                  . |         0          0          0          0      4,631 |     4,631 
--------------------+-------------------------------------------------------+----------
              Total |    56,449     16,280     13,033      5,564     20,385 |   111,711 

. 
. recode CHFSEC (0 9 = .)
(112,307 changes made to CHFSEC)

. recode FSCHRAW (0/1=1 "Food-secure children")                                                            ///
>         (2/4=2 "Low-food-secure children")                                                                       
>         ///
>         (5/8=3 "Very-low-food-secure children")                                                                  
> ///
>         (else=.), g(FSCHcats)
(222,725 differences between FSCHRAW and FSCHcats)

. tab FSCHcats CHFSEC, miss

    RECODE of FSCHRAW |
       (Food security |   CHILDREN{char 39}S FOOD SECURITY STATUS
   child-specific raw |                  CATEGORY
               score) | High or m  Low food   Very low           . |     Total
----------------------+--------------------------------------------+----------
 Food-secure children |    82,493          0          0    146,366 |   228,859 
Low-food-secure child |         0      7,793          0      3,271 |    11,064 
Very-low-food-secure  |         0          0      1,040        241 |     1,281 
                    . |         0          0          0  1,582,484 | 1,582,484 
----------------------+--------------------------------------------+----------
                Total |    82,493      7,793      1,040  1,732,362 | 1,823,688 

. 
. recode FSCHRAW (0/1=0 "Food-secure children")                                                            ///
>         (2/8=1 "Food-insecure children")                                                                         
>         ///
>         (else=.), g(foodinsecure_children)
(24,006 differences between FSCHRAW and foodinsecure_children)

. tab foodinsecure_children CHFSEC if FSECCHHO == 0
no observations

. tab foodinsecure_children CHFSEC if FSECCHHO == 1

    RECODE of FSCHRAW |
       (Food security | CHILDREN{char 39}S FOOD SECURITY
   child-specific raw |         STATUS CATEGORY
               score) | High or m  Low food   Very low  |     Total
----------------------+---------------------------------+----------
 Food-secure children |    82,493          0          0 |    82,493 
Food-insecure childre |         0      7,793      1,040 |     8,833 
----------------------+---------------------------------+----------
                Total |    82,493      7,793      1,040 |    91,326 

. 
. recode FSCHRAW (0=0 "Food-secure children")(1/8=1 "Food-insecure children")      ///
>         (else=.), g(food_mglinsecure_children)
(12,345 differences between FSCHRAW and food_mglinsecure_children)

. tab food_mglinsecure_children CHFSEC if FSECCHHO == 0
no observations

. tab food_mglinsecure_children CHFSEC if FSECCHHO == 1

    RECODE of FSCHRAW |
       (Food security | CHILDREN{char 39}S FOOD SECURITY
   child-specific raw |         STATUS CATEGORY
               score) | High or m  Low food   Very low  |     Total
----------------------+---------------------------------+----------
 Food-secure children |    73,992          0          0 |    73,992 
Food-insecure childre |     8,501      7,793      1,040 |    17,334 
----------------------+---------------------------------+----------
                Total |    82,493      7,793      1,040 |    91,326 

. 
. /* Food insufficiency */
. 
. replace FOODSUFFICIENCY = CDS_FOODSUFFICIENCY if SURVEYYEAR == 1997 &            ///
>         FOODSUFFICIENCY == .
(3,234 real changes made)

. replace FOODSUFFWHY = CDS_FOODSUFFWHY if SURVEYYEAR == 1997 & FOODSUFFWHY == .
(3,234 real changes made)

. 
. recode FOODSUFFICIENCY (1/2 = 0)(3/4 = 1)(8/9 = .), g(insufficient_screen)
(110,294 differences between FOODSUFFICIENCY and insufficient_screen)

. replace insufficient_screen = 0 if FOODSUFFICIENCY == 1 & FOODSUFFWHY != 1
(0 real changes made)

. 
. egen foodscreen = rowtotal(FOOD01 FOOD02 FOOD03), miss
(1,493,454 missing values generated)

. recode foodscreen (1/3 = 1 "Food insufficient")(0 = 0 "Food sufficient"),        ///
>         g(insufficient_q123)
(37,808 differences between foodscreen and insufficient_q123)

. 
. /* Family food security: highest status */
. 
. recode FScats (3/4=1 "Food insecure")(1/2=0 "Food secure")(else=.), g(insecure)
(241,204 differences between FScats and insecure)

. 
. recode FScats (2/4=1 "Marginal, low, or very low food secure")                           ///
>         (1=0 "High food secure")(else=.), g(mglsecure)
(241,204 differences between FScats and mglsecure)

.         
. recode FScats (3/4=1 "Low or very low food secure")                                                      ///
>         (1/2=0 "High or marginal food secure")(else=.), g(lowsecure)
(241,204 differences between FScats and lowsecure)

.         
. recode FScats (4=1 "Very low food secure")                                                                       
> ///
>         (1/3=0 "High, marginal, or low food secure")(else=.), g(vlwsecure)
(241,204 differences between FScats and vlwsecure)

. 
. recode FSCHcats (1=0 "Food-secure children")                                                             ///
>         (2/3=1 "Food-insecure children")(else=.), g(childinsecure)
(241,204 differences between FSCHcats and childinsecure)

. 
. /* Food security status indicators */
. tab FScats, g(FS_status_)

    RECODE of FSRAW |
 (Food security raw |
             score) |      Freq.     Percent        Cum.
--------------------+-----------------------------------
             Secure |    181,491       75.24       75.24
Marginally insecure |     27,129       11.25       86.49
         Low secure |     21,614        8.96       95.45
    Very low secure |     10,970        4.55      100.00
--------------------+-----------------------------------
              Total |    241,204      100.00

. 
. /* Latent food security */
. raschtestv7 FOOD01-FOOD18 if HEAD == 1 & FamUnit_NCU18 > 0 &                             ///
>         FamUnit_NCU18 != ., genlt(latent_child_present)
(PSID Intergenerational File)
(PSID Intergenerational File)

Estimation method: Conditional maximum likelihood (CML)
Number of items: 18
Number of groups: 19 (17 of them are used to compute the statistics of test)
Number of individuals: 26430 (54730 individuals removed for missing values)
Number of individuals with null or perfect score: 19661
Conditional log-likelihood: -21246.3350  
Log-likelihood: -42134.1544  

               Difficulty                                Standardized
        Items  parameters  Std. Err.    R1c   df p-value Outfit  Infit      U
-----------------------------------------------------------------------------
        FOOD01   -9.18158   0.17204  97.192   16  0.0000  4.357  2.207  7.383
        FOOD02   -8.00019   0.17138 158.893   16  0.0000  1.057 -0.750  1.807
        FOOD03   -7.27177   0.17131 200.106   16  0.0000  6.728  9.699 10.894
        FOOD04   -6.01216   0.17151 246.456   16  0.0000 -11.618-12.474-8.111
        FOOD05   -4.80732   0.17224 196.522   16  0.0000 -6.721 -3.470 -0.822
        FOOD06   -6.18713   0.17146 227.409   16  0.0000 -6.328 -10.987-4.877
        FOOD07   -4.92961   0.17213 118.496   16  0.0000 -7.978 -5.625 -4.729
        FOOD08   -3.73917   0.17391 212.950   16  0.0000 -4.013 -0.694  2.538
        FOOD09   -3.26083   0.17527  94.347   16  0.0000 -4.259 -1.106 -1.233
        FOOD10   -2.52330   0.17866  97.920   16  0.0000 -4.442 -1.888 -0.709
        FOOD11   -7.17287   0.171311548.554   16  0.0000 10.757 16.566 17.546
        FOOD12   -5.83300   0.17158 152.705   16  0.0000 -0.425  7.279  3.954
        FOOD13   -3.72061   0.17395 166.587   16  0.0000 -1.629  0.847 -1.353
        FOOD14   -3.14932   0.17566 198.334   16  0.0000 -1.203  3.501  1.138
        FOOD15   -1.31287   0.19074  73.309   16  0.0000 -1.651 -1.873 -0.779
        FOOD16   -0.61803   0.20372  51.541   16  0.0000 -1.209 -2.178 -0.215
        FOOD17   -2.26872   0.18037 124.811   16  0.0000 -2.304 -1.353 -1.025
       FOOD18*    0.00000        .   98.830   16  0.0000 -1.318 -0.342 -0.375
-----------------------------------------------------------------------------
     R1c test                  R1c=2370.637  272  0.0000
     Andersen LR test            Z=2182.734  272  0.0000
-----------------------------------------------------------------------------
*: The difficulty parameter of this item had been fixed to 0
You have groups of scores with less than 30 individuals. The tests can be invalid.


                                Ability                    Expected
                Group Score  parameters  Std. Err.   Freq.    Score       ll
                --------------------------------------------------------------
                    0     0     -10.000     1.557     19651    0.62
                --------------------------------------------------------------
                    1     1      -9.066     0.695     1837     1.24 -2132.4735
                --------------------------------------------------------------
                    2     2      -8.173     0.390     1315     2.18 -2564.5643
                --------------------------------------------------------------
                    3     3      -7.485     0.278      813     3.13 -2351.9858
                --------------------------------------------------------------
                    4     4      -6.896     0.225      524     4.09 -1964.7849
                --------------------------------------------------------------
                    5     5      -6.360     0.196      479     5.06 -2106.5790
                --------------------------------------------------------------
                    6     6      -5.855     0.181      394     6.04 -2029.0503
                --------------------------------------------------------------
                    7     7      -5.365     0.172      318     7.03 -1680.1221
                --------------------------------------------------------------
                    8     8      -4.885     0.166      280     8.02 -1490.8478
                --------------------------------------------------------------
                    9     9      -4.412     0.162      230     9.01 -1143.4884
                --------------------------------------------------------------
                   10    10      -3.948     0.160      171     10.00  -922.8698
                --------------------------------------------------------------
                   11    11      -3.489     0.162      136     10.98  -652.9818
                --------------------------------------------------------------
                   12    12      -3.024     0.172       84     11.95  -377.0063
                --------------------------------------------------------------
                   13    13      -2.537     0.191       83     12.92  -382.2317
                --------------------------------------------------------------
                   14    14      -2.009     0.224       40     13.90  -177.3431
                --------------------------------------------------------------
                   15    15      -1.413     0.279       32     14.87  -113.8509
                --------------------------------------------------------------
                   16    16      -0.716     0.384       13     15.84   -35.4686
                --------------------------------------------------------------
                   17    17       0.149     0.666       20     16.76   -29.3198
                --------------------------------------------------------------
                   18    18       1.573     2.654       10     17.61
                --------------------------------------------------------------
(PSID Intergenerational File)

. raschtestv7 FOOD01-FOOD18 if HEAD == 1 & FamUnit_NCU18 == 0,                             ///
>         genlt(latent_no_children)
(PSID Intergenerational File)
At least one group of scores concerns none individuals. Tests will be not computed.
Use the group or the autogroup options.

Estimation method: Conditional maximum likelihood (CML)
Number of items: 18
Number of groups: 19
Number of individuals: 30301 (83188 individuals removed for missing values)
Number of individuals with null or perfect score: 24479
Conditional log-likelihood: -12048.0435  
Log-likelihood: -299196.3988 

               Difficulty
        Items  parameters  Std. Err.
-----------------------------------
        FOOD01   -1.3e+01   0.74640
        FOOD02   -1.2e+01   0.74627
        FOOD03   -1.2e+01   0.74626
        FOOD04   -1.0e+01   0.74611
        FOOD05   -9.29773   0.74601
        FOOD06   -1.0e+01   0.74610
        FOOD07   -9.03304   0.74599
        FOOD08   -8.22557   0.74597
        FOOD09   -7.52747   0.74602
        FOOD10   -6.73884   0.74602
        FOOD11   -4.63114   0.75214
        FOOD12   -4.11026   0.75640
        FOOD13   -2.90295   0.77279
        FOOD14   -2.02056   0.79452
        FOOD15   -0.98015   0.86178
        FOOD16   -0.73520   0.88999
        FOOD17   -1.51855   0.81832
       FOOD18*    0.00000        .
-----------------------------------
*: The difficulty parameter of this item had been fixed to 0


                                Ability                    Expected
                Group Score  parameters  Std. Err.   Freq.    Score
                ---------------------------------------------------
                    0     0     -10.000     0.323     24478    4.86
                ---------------------------------------------------
                    1     1     -10.000     0.323     1583     4.86
                ---------------------------------------------------
                    2     2     -10.000     0.323      986     4.86
                ---------------------------------------------------
                    3     3     -10.000     0.323      887     4.86
                ---------------------------------------------------
                    4     4     -10.000     0.323      436     4.86
                ---------------------------------------------------
                    5     5      -9.874     0.319      431     5.03
                ---------------------------------------------------
                    6     6      -9.168     0.310      415     5.99
                ---------------------------------------------------
                    7     7      -8.458     0.328      368     6.96
                ---------------------------------------------------
                    8     8      -7.700     0.380      319     7.92
                ---------------------------------------------------
                    9     9      -6.827     0.479      132     8.91
                ---------------------------------------------------
                   10    10      -5.697     0.582      249     9.99
                ---------------------------------------------------
                   11    11      -4.539     0.518        3     11.06
                ---------------------------------------------------
                   12    12      -3.581     0.430        1     12.06
                ---------------------------------------------------
                   13    13      -2.733     0.365        3     13.06
                ---------------------------------------------------
                   14    14      -1.985     0.323        6     14.03
                ---------------------------------------------------
                   15    15      -1.292     0.322        3     14.97
                ---------------------------------------------------
                   16    16      -0.587     0.390        0     15.88
                ---------------------------------------------------
                   17    17       0.246     0.653        0     16.76
                ---------------------------------------------------
                   18    18       1.632     2.579        1     17.60
                ---------------------------------------------------
(PSID Intergenerational File)

. g latentFS = 10 + latent_child_present * (FamUnit_NCU18 > 0 &                            ///
>         FamUnit_NCU18 != .) + latent_no_children * (FamUnit_NCU18 == 0)
(1,582,702 missing values generated)

. 
. **# Age, quadratics
. ********************************************************************************
. 
. g AGE2 = AGE^2
(3,078 missing values generated)

. 
. bysort ID (YEAR): replace AGE_h = AGE_h[_n+1] - 1 if AGE_h == .
(361,731 real changes made)

. bysort ID (YEAR): replace AGE_h = AGE_h[_n-1] + 1 if AGE_h == .
(393,372 real changes made)

. g AGE_h2 = AGE_h^2
(581,278 missing values generated)

. 
. tempvar mage mage2

. g `mage2' = YEAR - MOMYOB if MOMYOB < 9998
(994,329 missing values generated)

. bysort ID: egen `mage' = mean(`mage2') if AGE >= 0 & AGE < 18
(1,596,130 missing values generated)

. bysort ID: egen MAGE = mean(`mage')
(1,269,972 missing values generated)

. drop `mage' `mage2'

. 
. tempvar dage dage2

. g `dage2' = YEAR - DADYOB if DADYOB < 9998
(1,255,149 missing values generated)

. bysort ID: egen `dage' = mean(`dage2') if AGE >= 0 & AGE < 18
(1,663,719 missing values generated)

. bysort ID: egen DAGE = mean(`dage')
(1,431,135 missing values generated)

. drop `dage' `dage2'

. 
. tempvar page

. bysort ID: egen `page' = mean(AGE_h) if AGE >= 0 & AGE < 18
(1,540,271 missing values generated)

. bysort ID: egen PAGE = mean(`page')
(1,131,381 missing values generated)

. replace PAGE = DAGE if PAGE == .
(26,379 real changes made)

. replace PAGE = MAGE if PAGE == .
(21,168 real changes made)

. g PAGE2 = PAGE^2
(1,083,834 missing values generated)

. drop `page'

. 
. **# Demographics
. ********************************************************************************
. 
. tempvar roundncu18

. g `roundncu18' = round(FamUnit_NCU18)

. recode `roundncu18' (4/max=4)
(22,094 changes made to __00001P)

. tab `roundncu18', g(NC)

   __00001P |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |  1,309,620       71.81       71.81
          1 |    178,711        9.80       81.61
          2 |    181,112        9.93       91.54
          3 |     97,715        5.36       96.90
          4 |     56,530        3.10      100.00
------------+-----------------------------------
      Total |  1,823,688      100.00

. drop `roundncu18'

. 
. tempvar edu

. clonevar `edu' = EDUCATION
(769,207 missing values generated)

. bysort ID (YEAR): replace `edu' = max(`edu', `edu'[_n-1])
(0 real changes made)

. tabstat EDUCATION `edu' if touse_cohort == 1, by(SURVEYYEAR)

Summary statistics: Mean
Group variable: SURVEYYEAR (PSID survey year)

SURVEYYEAR |  EDUCAT~N  __00001Q
-----------+--------------------
      1995 |         .         .
      1996 |         .         .
      1997 |         .         .
      1998 |         .         .
      1999 |         .         .
      2000 |         .         .
      2001 |  9.306931  9.306931
      2002 |    9.3125    9.3125
      2003 |  10.24221  10.24221
      2004 |  10.24163  10.24163
      2005 |  10.99519  10.99519
      2006 |  10.98519  10.98519
      2007 |    11.492    11.492
      2008 |  11.47582  11.47582
      2009 |  11.89074  11.89074
      2010 |  11.87845  11.87845
      2011 |  12.27158  12.27158
      2012 |  12.26467  12.26467
      2013 |  12.45375  12.45375
      2014 |  12.45271  12.45271
      2015 |   13.0161   13.0161
      2016 |  12.98803  12.98803
      2017 |  13.41064  13.41064
      2018 |  13.40347  13.40347
      2019 |  13.66077  13.66077
      2020 |  13.73246  13.73246
      2021 |  13.90999  13.90999
-----------+--------------------
     Total |  12.59294  12.59294
--------------------------------

. bysort FID YEAR: egen MaxEdu = max(`edu')
(1,933 missing values generated)

. recode MaxEdu (0/12 = 1)(13/max=0)(else=.), g(LTEHS)
(1,821,742 differences between MaxEdu and LTEHS)

. drop `edu'

. 
. bysort FID YEAR: egen AnyMarried = max(is_Married)

. 
. g OADULTS = (round(FamUnit_18up) > 1 + AnyMarried)                                                       ///
>         if !missing(FamUnit_18up, AnyMarried)

. 
. bysort FID YEAR: egen OtherAdults = max(AGE >= 18 & AGE != . & FamUnit > 0 & ///
>         FamUnit != . & FAMHEAD == 0)

. 
. tab OADULTS OtherAdults, miss

           |      OtherAdults
   OADULTS |         0          1 |     Total
-----------+----------------------+----------
         0 | 1,563,047     73,226 | 1,636,273 
         1 |    18,651    168,764 |   187,415 
-----------+----------------------+----------
     Total | 1,581,698    241,990 | 1,823,688 

. sum OADULTS OtherAdults

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
     OADULTS |  1,823,688     .102767    .3036544          0          1
 OtherAdults |  1,823,688    .1326927    .3392424          0          1

. corr OADULTS OtherAdults
(obs=1,823,688)

             |  OADULTS OtherA~s
-------------+------------------
     OADULTS |   1.0000
 OtherAdults |   0.7660   1.0000


. 
. bysort FID YEAR: egen DISAB = max(inlist(DISAB_amt_h, 1, 3) | ///
>         inlist(DISAB_amt_s, 1, 3) | SS_type_i == 1 | SSI == 1)

. bysort FID (YEAR): replace DISAB = DISAB[_n+1] if mod(SURVEYYEAR, 2) == 0 &      ///
>         DISAB == .
(0 real changes made)

. bysort FID (YEAR): replace DISAB = DISAB[_n-1] if mod(SURVEYYEAR, 2) == 0 &      ///
>         DISAB == .
(0 real changes made)

. 
. bysort FID YEAR: egen elder = max(AGE > 65 & AGE != . & FamUnit > 0)

. 
. recode RACEimputation HISPimputation (0/1 = 0)(else = 1)
(954,531 changes made to RACEimputation)
(1,057,671 changes made to HISPimputation)

. egen RaceEthnicity_imputed = rowmax(RACEimputation HISPimputation)

. 
. **# Socioeconomic measures
. ********************************************************************************
. 
. sum pce_nfe_bea_US if YEAR == 2019

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
pce_nfe_b~US |     67,544    103.5772           0   103.5772   103.5772

. g PCE2019 = pce_nfe_bea_US / `r(mean)'

. 
. g FINC_real = FINC / PCE2019
(1,229,321 missing values generated)

. 
. tempvar earn

. egen `earn' = rowtotal(EARN_h EARN_s), miss
(1,336,381 missing values generated)

. bysort FID YEAR: egen EARN = max(`earn'), miss
(1,336,381 missing values generated)

. g EARN_real = EARN / PCE2019
(1,336,381 missing values generated)

. g lnEARN = ln(EARN_real + 1)
(1,336,381 missing values generated)

. drop `earn'

. 
. g EARNPOV = EARN / POVTHRESH
(1,336,381 missing values generated)

. 
. tempvar e14

. bysort ID: egen `e14' = mean(EARNPOV) if inlist(SURVEYYEAR, 2013, 2014, 2015)
(1,735,104 missing values generated)

. replace EARNPOV = `e14' if SURVEYYEAR == 2014 & EARNPOV == .
(29,528 real changes made)

. drop `e14'

. 
. tempvar earn

. bysort ID: egen `earn' = mean(EARNPOV) if AGE >= 0 & AGE < 18 & FamUnit > 0
(1,663,604 missing values generated)

. bysort ID: egen EARNPOV_c = mean(`earn')
(1,284,471 missing values generated)

. drop `earn'

. 
. recode EARNPOV (0/1=1)(1/max=0), g(EarnPoverty)
(516,835 differences between EARNPOV and EarnPoverty)

. tempvar learn

. bysort ID: egen `learn' = mean(EarnPoverty) if AGE >= 0 & AGE < 18 & FamUnit > 0
(1,663,604 missing values generated)

. bysort ID: egen EarnPoverty_c = mean(`learn')
(1,284,471 missing values generated)

. drop `learn'

. 
. g POV = (FINC < POVTHRESH) if FINC != . & POVTHRESH != .
(1,229,321 missing values generated)

. 
. g lnwealth = asinh(WLTH)
(1,462,599 missing values generated)

. g lnequity = asinh(WLEQ)
(1,462,599 missing values generated)

. g lnEARNPOV = asinh(EARNPOV)
(1,306,853 missing values generated)

. 
. tempvar eq

. bysort ID: egen `eq' = mean(lnequity) if AGE >= 0 & AGE < 18 & FamUnit > 0
(1,670,959 missing values generated)

. bysort ID: egen lnequity_c = mean(`eq')
(1,382,454 missing values generated)

. drop `eq'

. 
. /* Wage */
. g wagerate = HD_wagerate if HEAD == 1
(1,712,677 missing values generated)

. replace wagerate = SP_wagerate if HEAD == 0 & FAMHEAD == 1
(58,780 real changes made)

. replace wagerate = . if inlist(wagerate, 9998, 9999)
(2,093 real changes made, 2,093 to missing)

. g LNREALWAGE = asinh(wagerate / PCE2019)
(1,655,990 missing values generated)

. 
. /* Health */
. g HEALTH = SELFRATEHEALTH_h if HEAD == 1
(1,712,677 missing values generated)

. replace HEALTH = SELFRATEHEALTH_s if HEAD == 0 & FAMHEAD == 1
(58,780 real changes made)

. tab HEALTH

     HEALTH |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |      1,357        0.80        0.80
          1 |     31,859       18.76       19.56
          2 |     58,249       34.31       53.87
          3 |     51,075       30.08       83.95
          4 |     19,995       11.78       95.73
          5 |      6,635        3.91       99.63
          8 |        137        0.08       99.71
          9 |        484        0.29      100.00
------------+-----------------------------------
      Total |    169,791      100.00

. recode HEALTH (3/5 = 0 "Poor, fair, or good")                                                            ///
>         (1/2 = 1 "Very good, excellent") (else = .), g(GOODHEALTH)
(137,932 differences between HEALTH and GOODHEALTH)

. 
. /* Education */
. recode ANYCOLLEGE_h (5 = 0)(1 = 1)(else = .), g(ANYCOLLEGE)
(235,549 differences between ANYCOLLEGE_h and ANYCOLLEGE)

. clonevar attendcollege_byyear = ANYCOLLEGE
(1,345,996 missing values generated)

. bysort ID (YEAR): replace ANYCOLLEGE = max(ANYCOLLEGE, ANYCOLLEGE[_n-1])
(792,905 real changes made)

. 
. /* Food stamps/SNAP */
. recode FS (5 = 0)(1 = 1)(else = .), g(FSSNAP)
(696,295 differences between FS and FSSNAP)

. replace SNAP = 0 if FSSNAP == 0 & SNAP == .
(650,666 real changes made)

. 
. g EARN000 = EARN_real / 1000
(1,336,381 missing values generated)

. g FINC000 = FINC_real / 1000
(1,229,321 missing values generated)

. g FOOD000 = (FoodTotal_FS_SNAP / PCE2019) / 1000
(1,303,781 missing values generated)

. g SNAP000 = (SNAP / PCE2019) / 1000
(1,009,867 missing values generated)

. 
. **# Food spending and SNAP relative to needs
. ********************************************************************************
. 
. replace SNAP = 0 if SNAP == . & (FS == 5 | FoodAtHome != .)
(4,264 real changes made)

. replace SNAP = . if FoodAtHome == .
(338,561 real changes made, 338,561 to missing)

. replace FoodAtHome_FS_SNAP = . if FoodAtHome == .
(39,005 real changes made, 39,005 to missing)

. replace FoodTotal_FS_SNAP = . if FoodTotal == .
(35,138 real changes made, 35,138 to missing)

. 
. rename YEAR year

. sort year

. merge m:1 year using "${path}\USDA_food_plans_yearly_2020.dta", nogen keep(1 3)

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                         1,823,688  
    -----------------------------------------

. rename year YEAR

. {
.         /* Family size food needs adjustment */
.         tempvar food_needs_adj roundfamsize
.         g `roundfamsize' = round(FamUnitSize, 1)
.         recode `roundfamsize' (1=1.2)(2=1.1)(3=1.05)(4=1)(5/6=.95)(7/max=.9),    ///
>                 g(`food_needs_adj')
(826,302 differences between __00001X and __00001W)
.                 
.         tempvar proportionweight
.         g `proportionweight' = 1
.         
.         tempvar stateval age female
.         g `stateval' = STATEPSID
.         g `age' = AGE
(3,078 missing values generated)
.         g `female' = FEMALE
.         
.         local if = "if FamUnit > 0"
.         local ifand = "&"
. 
.         /* Food plans [gaps, ratios, FGT-type indices] */
.         ****************************************************************************
.         local foodplans = `""tfp" "lcp" "mcp" "lib""'
.         local foodexpenditure FoodAtHome FoodTotal FoodAtHome_FS_SNAP ///
>                 FoodTotal_FS_SNAP SNAP
.         foreach f in tfp lcp mcp lib {
  2.                 local F = strupper("`f'")
  3.                 local fp = "`f'"
  4.                 local fp = subinstr("`fp'", "tfp", "Thrifty Food Plan", 1)
  5.                 local fp = subinstr("`fp'", "lcp", "Low-Cost Food Plan", 1)
  6.                 local fp = subinstr("`fp'", "mcp", "Moderate-Cost Food Plan", 1)
  7.                 local fp = subinstr("`fp'", "lib", "Liberal Food Plan", 1)
  8. 
.                 capture g `f'_needs = .
  9.                 label variable `f'_needs "`fp' individual food needs"
 10.                 
.                 foreach x in "" "_ak" "_hi" {
 11.                         
.                         local statevalid = "!inlist(`stateval', 50, 51) & `stateval' != ."
 12.                         if ("`x'" == "_ak") local statevalid = "`stateval' == 50"
 13.                         if ("`x'" == "_hi") local statevalid = "`stateval' == 51"
 14.                         
.                         capture replace `f'_needs = `f'_c_7m_1_yearly`x' `if'                    ///
>                                 `ifand' `age' == 0 & `statevalid' & `f'_needs == .
 15.                         capture replace `f'_needs = `f'_c_u1_yearly`x' `if'                              ///
>                                 `ifand' `age' == 0 & `statevalid' & `f'_needs == .
 16.                         capture replace `f'_needs = `f'_c_1_yearly`x' `if'                               ///
>                                 `ifand' `age' == 1 & `statevalid' & `f'_needs == .
 17.                         capture replace `f'_needs = `f'_c_1_2_yearly`x' `if'                     ///
>                                 `ifand' `age' >= 1 & `age' <= 2 & `statevalid' & `f'_needs == .
 18.                         capture replace `f'_needs = `f'_c_2_yearly`x' `if'                               ///
>                                 `ifand' `age' == 2 & `statevalid' & `f'_needs == .
 19.                         capture replace `f'_needs = `f'_c_2_3_yearly`x' `if'                     ///
>                                 `ifand' `age' >= 2 & `age' <= 3 & `statevalid' & `f'_needs == .
 20.                         capture replace `f'_needs = `f'_c_3_5_yearly`x' `if'                     ///
>                                 `ifand' `age' >= 3 & `age' <= 5 & `statevalid' & `f'_needs == .
 21.                         capture replace `f'_needs = `f'_c_4_5_yearly`x' `if'                     ///
>                                 `ifand' `age' >= 4 & `age' <= 5 & `statevalid' & `f'_needs == .
 22.                         capture replace `f'_needs = `f'_c_6_8_yearly`x' `if'                     ///
>                                 `ifand' `age' >= 6 & `age' <= 8 & `statevalid' & `f'_needs == .
 23.                         capture replace `f'_needs = `f'_c_9_11_yearly`x' `if'                    ///
>                                 `ifand' `age' >= 9 & `age' <= 11 & `statevalid' & `f'_needs == .
 24.         
.                         forvalues FEM = 0/1 {
 25.                                 if (`FEM' == 0) local g = "m"
 26.                                 if (`FEM' == 1) local g = "f"
 27.                                 capture replace `f'_needs = `f'_`g'_9_11_yearly`x'                       ///
>                                         `if' `ifand' `age' >= 9 & `age' <= 11 & `statevalid' &   ///
>                                         `female' == `FEM' & `f'_needs == .
 28.                                 capture replace `f'_needs = `f'_`g'_12_13_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 12 & `age' <= 13 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 29.                                 capture replace `f'_needs = `f'_`g'_12_14_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 12 & `age' <= 14 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 30.                                 capture replace `f'_needs = `f'_`g'_14_18_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 14 & `age' <= 18 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 31.                                 capture replace `f'_needs = `f'_`g'_12_19_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 12 & `age' <= 19 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 32.                                 capture replace `f'_needs = `f'_`g'_15_19_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 15 & `age' <= 19 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 33.                                 capture replace `f'_needs = `f'_`g'_19_50_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 19 & `age' <= 50 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 34.                                 capture replace `f'_needs = `f'_`g'_20_34_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 20 & `age' <= 34 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 35.                                 capture replace `f'_needs = `f'_`g'_20_50_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 20 & `age' <= 50 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 36.                                 capture replace `f'_needs = `f'_`g'_20_54_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 20 & `age' <= 54 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 37.                                 capture replace `f'_needs = `f'_`g'_35_54_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 35 & `age' <= 54 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 38.                                 capture replace `f'_needs = `f'_`g'_51_70_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 51 & `age' <= 70 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 39.                                 capture replace `f'_needs = `f'_`g'_55_74_yearly`x'                      ///
>                                         `if' `ifand' `age' >= 55 & `age' <= 74 & `statevalid' &  ///
>                                         `female' == `FEM' & `f'_needs == .
 40.                                 capture replace `f'_needs = `f'_`g'_51_plus_yearly`x'            ///
>                                         `if' `ifand' `age' >= 51 & `age' < . & `statevalid' &    ///
>                                         `female' == `FEM' & `f'_needs == .
 41.                                 capture replace `f'_needs = `f'_`g'_55_plus_yearly`x'            ///
>                                         `if' `ifand' `age' >= 55 & `age' != . & `statevalid' &   ///
>                                         `female' == `FEM' & `f'_needs == .
 42.                                 capture replace `f'_needs = `f'_`g'_71_plus_yearly`x'            ///
>                                         `if' `ifand' `age' >= 71 & `age' < . & `statevalid' &    ///
>                                         `female' == `FEM' & `f'_needs == .
 43.                                 capture replace `f'_needs = `f'_`g'_75_plus_yearly`x'            ///
>                                         `if' `ifand' `age' >= 75 & `age' < . & `statevalid' &    ///
>                                         `female' == `FEM' & `f'_needs == .
 44.                         }
 45.                 }
 46.                 
.                 capture drop `F'_foodneeds
 47.                 bysort FID YEAR: egen `F'_foodneeds =                                            ///
>                         total(`f'_needs * `food_needs_adj' * `proportionweight'), miss
 48.                 label variable `F'_foodneeds "`fp' family-level food needs"
 49.                 noisily display as text "  `f'_needs: `: variable label `f'_needs'"
 50.                 noisily display `"  `F'_foodneeds: `: variable label `F'_foodneeds'"'
 51.            
.                 /* Foster, Greer, Thorbecke indices */
.                 if ("`foodexpenditure'" != "") {
 52.                         local z `=upper("`f'")'_foodneeds
 53.                         foreach y of local foodexpenditure {
 54.                         
.                                 cap drop foodgap_`f'_`y'
 55.                                 g foodgap_`f'_`y' = max(`z' - `y', 0) if `z' != . & `y' != .
 56.                                 label variable foodgap_`f'_`y' "`fp' expenditure gap (dollars)"
 57.                                 
.                                 cap drop foodratio_`f'_`y'
 58.                                 g foodratio_`f'_`y' = `y' / `z' if `z' != . & `y' != .
 59.                                 label variable foodratio_`f'_`y' "`fp' expenditure ratio"
 60.                         
.                                 if ("`alpha'" == "") local alpha = "0/2"
 61.                                 local atype0 = "rate below `F'"
 62.                                 local atype1 = "gap/depth as percent of `F'"
 63.                                 local atype2 = "squared gap/severity per `F'"
 64.                                 foreach a of numlist `alpha' {
 65.                                         cap drop fp_`f'_`y'_a`a'
 66.                                         g fp_`f'_`y'_a`a' = (`y' < `z') *                                     
>            ///
>                                                 min(max(`z' - `y', 0) / `z', 1)^`a'                              
>         ///
>                                                 if `y' != . & `z' != .
 67.                                         la var fp_`f'_`y'_a`a'                                                
>                    ///
>                                                 "`fp' FGT-type food poverty index: `atype`a''"
 68.                                         noisily display `"  fp_`f'_`y'_a`a': "'                               
>    ///
>                                                 `"`: variable label fp_`f'_`y'_a`a''"'
 69.                                 }
 70.                         }
 71.                 }
 72.         }
(998,389 missing values generated)
  tfp_needs: Thrifty Food Plan individual food needs
  TFP_foodneeds: Thrifty Food Plan family-level food needs
(1,345,372 missing values generated)
(1,345,431 missing values generated)
(1,345,372 missing values generated)
  fp_tfp_FoodAtHome_a0: Thrifty Food Plan FGT-type food poverty index: rate below TFP
(1,345,372 missing values generated)
  fp_tfp_FoodAtHome_a1: Thrifty Food Plan FGT-type food poverty index: gap/depth as percent of TFP
(1,345,372 missing values generated)
  fp_tfp_FoodAtHome_a2: Thrifty Food Plan FGT-type food poverty index: squared gap/severity per TFP
(1,340,137 missing values generated)
(1,340,196 missing values generated)
(1,340,137 missing values generated)
  fp_tfp_FoodTotal_a0: Thrifty Food Plan FGT-type food poverty index: rate below TFP
(1,340,137 missing values generated)
  fp_tfp_FoodTotal_a1: Thrifty Food Plan FGT-type food poverty index: gap/depth as percent of TFP
(1,340,137 missing values generated)
  fp_tfp_FoodTotal_a2: Thrifty Food Plan FGT-type food poverty index: squared gap/severity per TFP
(1,345,372 missing values generated)
(1,345,431 missing values generated)
(1,345,372 missing values generated)
  fp_tfp_FoodAtHome_FS_SNAP_a0: Thrifty Food Plan FGT-type food poverty index: rate below TFP
(1,345,372 missing values generated)
  fp_tfp_FoodAtHome_FS_SNAP_a1: Thrifty Food Plan FGT-type food poverty index: gap/depth as percent of TFP
(1,345,372 missing values generated)
  fp_tfp_FoodAtHome_FS_SNAP_a2: Thrifty Food Plan FGT-type food poverty index: squared gap/severity per TFP
(1,340,137 missing values generated)
(1,340,196 missing values generated)
(1,340,137 missing values generated)
  fp_tfp_FoodTotal_FS_SNAP_a0: Thrifty Food Plan FGT-type food poverty index: rate below TFP
(1,340,137 missing values generated)
  fp_tfp_FoodTotal_FS_SNAP_a1: Thrifty Food Plan FGT-type food poverty index: gap/depth as percent of TFP
(1,340,137 missing values generated)
  fp_tfp_FoodTotal_FS_SNAP_a2: Thrifty Food Plan FGT-type food poverty index: squared gap/severity per TFP
(1,345,372 missing values generated)
(1,345,431 missing values generated)
(1,345,372 missing values generated)
  fp_tfp_SNAP_a0: Thrifty Food Plan FGT-type food poverty index: rate below TFP
(1,345,372 missing values generated)
  fp_tfp_SNAP_a1: Thrifty Food Plan FGT-type food poverty index: gap/depth as percent of TFP
(1,345,372 missing values generated)
  fp_tfp_SNAP_a2: Thrifty Food Plan FGT-type food poverty index: squared gap/severity per TFP
(999,227 missing values generated)
  lcp_needs: Low-Cost Food Plan individual food needs
  LCP_foodneeds: Low-Cost Food Plan family-level food needs
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_lcp_FoodAtHome_a0: Low-Cost Food Plan FGT-type food poverty index: rate below LCP
(1,345,801 missing values generated)
  fp_lcp_FoodAtHome_a1: Low-Cost Food Plan FGT-type food poverty index: gap/depth as percent of LCP
(1,345,801 missing values generated)
  fp_lcp_FoodAtHome_a2: Low-Cost Food Plan FGT-type food poverty index: squared gap/severity per LCP
(1,340,566 missing values generated)
(1,340,625 missing values generated)
(1,340,566 missing values generated)
  fp_lcp_FoodTotal_a0: Low-Cost Food Plan FGT-type food poverty index: rate below LCP
(1,340,566 missing values generated)
  fp_lcp_FoodTotal_a1: Low-Cost Food Plan FGT-type food poverty index: gap/depth as percent of LCP
(1,340,566 missing values generated)
  fp_lcp_FoodTotal_a2: Low-Cost Food Plan FGT-type food poverty index: squared gap/severity per LCP
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_lcp_FoodAtHome_FS_SNAP_a0: Low-Cost Food Plan FGT-type food poverty index: rate below LCP
(1,345,801 missing values generated)
  fp_lcp_FoodAtHome_FS_SNAP_a1: Low-Cost Food Plan FGT-type food poverty index: gap/depth as percent of LCP
(1,345,801 missing values generated)
  fp_lcp_FoodAtHome_FS_SNAP_a2: Low-Cost Food Plan FGT-type food poverty index: squared gap/severity per LCP
(1,340,566 missing values generated)
(1,340,625 missing values generated)
(1,340,566 missing values generated)
  fp_lcp_FoodTotal_FS_SNAP_a0: Low-Cost Food Plan FGT-type food poverty index: rate below LCP
(1,340,566 missing values generated)
  fp_lcp_FoodTotal_FS_SNAP_a1: Low-Cost Food Plan FGT-type food poverty index: gap/depth as percent of LCP
(1,340,566 missing values generated)
  fp_lcp_FoodTotal_FS_SNAP_a2: Low-Cost Food Plan FGT-type food poverty index: squared gap/severity per LCP
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_lcp_SNAP_a0: Low-Cost Food Plan FGT-type food poverty index: rate below LCP
(1,345,801 missing values generated)
  fp_lcp_SNAP_a1: Low-Cost Food Plan FGT-type food poverty index: gap/depth as percent of LCP
(1,345,801 missing values generated)
  fp_lcp_SNAP_a2: Low-Cost Food Plan FGT-type food poverty index: squared gap/severity per LCP
(999,227 missing values generated)
  mcp_needs: Moderate-Cost Food Plan individual food needs
  MCP_foodneeds: Moderate-Cost Food Plan family-level food needs
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_mcp_FoodAtHome_a0: Moderate-Cost Food Plan FGT-type food poverty index: rate below MCP
(1,345,801 missing values generated)
  fp_mcp_FoodAtHome_a1: Moderate-Cost Food Plan FGT-type food poverty index: gap/depth as percent of MCP
(1,345,801 missing values generated)
note: label truncated to 80 characters
  fp_mcp_FoodAtHome_a2: Moderate-Cost Food Plan FGT-type food poverty index: squared gap/severity per MC
(1,340,566 missing values generated)
(1,340,625 missing values generated)
(1,340,566 missing values generated)
  fp_mcp_FoodTotal_a0: Moderate-Cost Food Plan FGT-type food poverty index: rate below MCP
(1,340,566 missing values generated)
  fp_mcp_FoodTotal_a1: Moderate-Cost Food Plan FGT-type food poverty index: gap/depth as percent of MCP
(1,340,566 missing values generated)
note: label truncated to 80 characters
  fp_mcp_FoodTotal_a2: Moderate-Cost Food Plan FGT-type food poverty index: squared gap/severity per MC
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_mcp_FoodAtHome_FS_SNAP_a0: Moderate-Cost Food Plan FGT-type food poverty index: rate below MCP
(1,345,801 missing values generated)
  fp_mcp_FoodAtHome_FS_SNAP_a1: Moderate-Cost Food Plan FGT-type food poverty index: gap/depth as percent of MCP
(1,345,801 missing values generated)
note: label truncated to 80 characters
  fp_mcp_FoodAtHome_FS_SNAP_a2: Moderate-Cost Food Plan FGT-type food poverty index: squared gap/severity per MC
(1,340,566 missing values generated)
(1,340,625 missing values generated)
(1,340,566 missing values generated)
  fp_mcp_FoodTotal_FS_SNAP_a0: Moderate-Cost Food Plan FGT-type food poverty index: rate below MCP
(1,340,566 missing values generated)
  fp_mcp_FoodTotal_FS_SNAP_a1: Moderate-Cost Food Plan FGT-type food poverty index: gap/depth as percent of MCP
(1,340,566 missing values generated)
note: label truncated to 80 characters
  fp_mcp_FoodTotal_FS_SNAP_a2: Moderate-Cost Food Plan FGT-type food poverty index: squared gap/severity per MC
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_mcp_SNAP_a0: Moderate-Cost Food Plan FGT-type food poverty index: rate below MCP
(1,345,801 missing values generated)
  fp_mcp_SNAP_a1: Moderate-Cost Food Plan FGT-type food poverty index: gap/depth as percent of MCP
(1,345,801 missing values generated)
note: label truncated to 80 characters
  fp_mcp_SNAP_a2: Moderate-Cost Food Plan FGT-type food poverty index: squared gap/severity per MC
(999,227 missing values generated)
  lib_needs: Liberal Food Plan individual food needs
  LIB_foodneeds: Liberal Food Plan family-level food needs
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_lib_FoodAtHome_a0: Liberal Food Plan FGT-type food poverty index: rate below LIB
(1,345,801 missing values generated)
  fp_lib_FoodAtHome_a1: Liberal Food Plan FGT-type food poverty index: gap/depth as percent of LIB
(1,345,801 missing values generated)
  fp_lib_FoodAtHome_a2: Liberal Food Plan FGT-type food poverty index: squared gap/severity per LIB
(1,340,566 missing values generated)
(1,340,625 missing values generated)
(1,340,566 missing values generated)
  fp_lib_FoodTotal_a0: Liberal Food Plan FGT-type food poverty index: rate below LIB
(1,340,566 missing values generated)
  fp_lib_FoodTotal_a1: Liberal Food Plan FGT-type food poverty index: gap/depth as percent of LIB
(1,340,566 missing values generated)
  fp_lib_FoodTotal_a2: Liberal Food Plan FGT-type food poverty index: squared gap/severity per LIB
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_lib_FoodAtHome_FS_SNAP_a0: Liberal Food Plan FGT-type food poverty index: rate below LIB
(1,345,801 missing values generated)
  fp_lib_FoodAtHome_FS_SNAP_a1: Liberal Food Plan FGT-type food poverty index: gap/depth as percent of LIB
(1,345,801 missing values generated)
  fp_lib_FoodAtHome_FS_SNAP_a2: Liberal Food Plan FGT-type food poverty index: squared gap/severity per LIB
(1,340,566 missing values generated)
(1,340,625 missing values generated)
(1,340,566 missing values generated)
  fp_lib_FoodTotal_FS_SNAP_a0: Liberal Food Plan FGT-type food poverty index: rate below LIB
(1,340,566 missing values generated)
  fp_lib_FoodTotal_FS_SNAP_a1: Liberal Food Plan FGT-type food poverty index: gap/depth as percent of LIB
(1,340,566 missing values generated)
  fp_lib_FoodTotal_FS_SNAP_a2: Liberal Food Plan FGT-type food poverty index: squared gap/severity per LIB
(1,345,801 missing values generated)
(1,345,860 missing values generated)
(1,345,801 missing values generated)
  fp_lib_SNAP_a0: Liberal Food Plan FGT-type food poverty index: rate below LIB
(1,345,801 missing values generated)
  fp_lib_SNAP_a1: Liberal Food Plan FGT-type food poverty index: gap/depth as percent of LIB
(1,345,801 missing values generated)
  fp_lib_SNAP_a2: Liberal Food Plan FGT-type food poverty index: squared gap/severity per LIB
. 
.         drop tfp_c_1_yearly tfp_c_2_3_yearly tfp_c_4_5_yearly tfp_c_6_8_yearly   ///
>                 tfp_c_9_11_yearly tfp_m_12_13_yearly tfp_m_14_18_yearly                          ///
>                 tfp_m_19_50_yearly tfp_m_51_70_yearly tfp_m_71_plus_yearly                       ///
>                 tfp_f_12_13_yearly tfp_f_14_18_yearly tfp_f_19_50_yearly                         ///
>                 tfp_f_51_70_yearly tfp_f_71_plus_yearly tfp_fam2_19_50_yearly            ///
>                 tfp_fam2_51_70_yearly tfp_fam4_23_45_yearly tfp_fam4_68_911_yearly       ///
>                 lcp_c_1_yearly lcp_c_2_3_yearly lcp_c_4_5_yearly lcp_c_6_8_yearly        ///
>                 lcp_c_9_11_yearly lcp_m_12_13_yearly lcp_m_14_18_yearly                          ///
>                 lcp_m_19_50_yearly lcp_m_51_70_yearly lcp_m_71_plus_yearly                       ///
>                 lcp_f_12_13_yearly lcp_f_14_18_yearly lcp_f_19_50_yearly                         ///
>                 lcp_f_51_70_yearly lcp_f_71_plus_yearly lcp_fam2_19_50_yearly            ///
>                 lcp_fam2_51_70_yearly lcp_fam4_23_45_yearly lcp_fam4_68_911_yearly       ///
>                 mcp_c_1_yearly mcp_c_2_3_yearly mcp_c_4_5_yearly mcp_c_6_8_yearly        ///
>                 mcp_c_9_11_yearly mcp_m_12_13_yearly mcp_m_14_18_yearly                          ///
>                 mcp_m_19_50_yearly mcp_m_51_70_yearly mcp_m_71_plus_yearly                       ///
>                 mcp_f_12_13_yearly mcp_f_14_18_yearly mcp_f_19_50_yearly                         ///
>                 mcp_f_51_70_yearly mcp_f_71_plus_yearly mcp_fam2_19_50_yearly            ///
>                 mcp_fam2_51_70_yearly mcp_fam4_23_45_yearly mcp_fam4_68_911_yearly       ///
>                 lib_c_1_yearly lib_c_2_3_yearly lib_c_4_5_yearly lib_c_6_8_yearly        ///
>                 lib_c_9_11_yearly lib_m_12_13_yearly lib_m_14_18_yearly                          ///
>                 lib_m_19_50_yearly lib_m_51_70_yearly lib_m_71_plus_yearly                       ///
>                 lib_f_12_13_yearly lib_f_14_18_yearly lib_f_19_50_yearly                         ///
>                 lib_f_51_70_yearly lib_f_71_plus_yearly lib_fam2_19_50_yearly            ///
>                 lib_fam2_51_70_yearly lib_fam4_23_45_yearly lib_fam4_68_911_yearly       ///
>                 tfp_c_2_yearly tfp_c_3_5_yearly tfp_m_12_14_yearly                                       ///
>                 tfp_m_15_19_yearly tfp_m_20_50_yearly tfp_m_51_plus_yearly                       ///
>                 tfp_f_12_19_yearly tfp_f_20_50_yearly tfp_f_51_plus_yearly                       ///
>                 tfp_fam2_20_50_yearly tfp_fam2_51_plus_yearly tfp_fam4_2_35_yearly       ///
>                 lcp_c_2_yearly lcp_c_3_5_yearly lcp_m_12_14_yearly                                       ///
>                 lcp_m_15_19_yearly lcp_m_20_50_yearly lcp_m_51_plus_yearly                       ///
>                 lcp_f_12_19_yearly lcp_f_20_50_yearly lcp_f_51_plus_yearly                       ///
>                 lcp_fam2_20_50_yearly lcp_fam2_51_plus_yearly lcp_fam4_2_35_yearly       ///
>                 mcp_c_2_yearly mcp_c_3_5_yearly mcp_m_12_14_yearly                                       ///
>                 mcp_m_15_19_yearly mcp_m_20_50_yearly mcp_m_51_plus_yearly                       ///
>                 mcp_f_12_19_yearly mcp_f_20_50_yearly mcp_f_51_plus_yearly                       ///
>                 mcp_fam2_20_50_yearly mcp_fam2_51_plus_yearly mcp_fam4_2_35_yearly       ///
>                 lib_c_2_yearly lib_c_3_5_yearly lib_m_12_14_yearly                                       ///
>                 lib_m_15_19_yearly lib_m_20_50_yearly lib_m_51_plus_yearly                       ///
>                 lib_f_12_19_yearly lib_f_20_50_yearly lib_f_51_plus_yearly                       ///
>                 lib_fam2_20_50_yearly lib_fam2_51_plus_yearly lib_fam4_2_35_yearly       ///
>                 tfp_c_1_2_yearly lcp_c_1_2_yearly mcp_c_1_2_yearly lib_c_1_2_yearly      ///
>                 tfp_fam4_12_35_yearly lcp_fam4_12_35_yearly mcp_fam4_12_35_yearly        ///
>                 lib_fam4_12_35_yearly tfp_c_6_8_yearly_ak tfp_c_9_11_yearly_ak           ///
>                 tfp_m_20_50_yearly_ak tfp_f_20_50_yearly_ak tfp_fam2_20_50_yearly_ak ///
>                 tfp_fam4_68_911_yearly_ak tfp_c_6_8_yearly_hi tfp_c_9_11_yearly_hi       ///
>                 tfp_m_20_50_yearly_hi tfp_f_20_50_yearly_hi tfp_fam2_20_50_yearly_hi ///
>                 tfp_fam4_68_911_yearly_hi tfp_fam2_20_35_yearly                                          ///
>                 tfp_fam2_55_75_yearly tfp_c_u1_yearly tfp_f_9_11_yearly                          ///
>                 tfp_f_12_14_yearly tfp_f_15_19_yearly tfp_m_9_11_yearly                          ///
>                 tfp_f_20_34_yearly tfp_f_35_54_yearly tfp_f_55_74_yearly                         ///
>                 tfp_f_75_plus_yearly tfp_f_pregnant_yearly tfp_f_nursing_yearly          ///
>                 tfp_m_20_34_yearly tfp_m_35_54_yearly tfp_m_55_74_yearly                         ///
>                 tfp_m_75_plus_yearly tfp_fam2_20_54_yearly tfp_fam2_55_plus_yearly       ///
>                 tfp_c_7m_1_yearly tfp_m_20_54_yearly tfp_m_55_plus_yearly                        ///
>                 tfp_f_20_54_yearly tfp_f_55_plus_yearly lcp_fam2_20_35_yearly            ///
>                 lcp_fam2_55_75_yearly lcp_c_u1_yearly lcp_f_9_11_yearly                          ///
>                 lcp_f_12_14_yearly lcp_f_15_19_yearly lcp_m_9_11_yearly                          ///
>                 lcp_f_20_34_yearly lcp_f_35_54_yearly lcp_f_55_74_yearly                         ///
>                 lcp_f_75_plus_yearly lcp_f_pregnant_yearly lcp_f_nursing_yearly          ///
>                 lcp_m_20_34_yearly lcp_m_35_54_yearly lcp_m_55_74_yearly                         ///
>                 lcp_m_75_plus_yearly lcp_fam2_20_54_yearly lcp_fam2_55_plus_yearly       ///
>                 lcp_c_7m_1_yearly lcp_m_20_54_yearly lcp_m_55_plus_yearly                        ///
>                 lcp_f_20_54_yearly lcp_f_55_plus_yearly mcp_fam2_20_35_yearly            ///
>                 mcp_fam2_55_75_yearly mcp_c_u1_yearly mcp_f_9_11_yearly                          ///
>                 mcp_f_12_14_yearly mcp_f_15_19_yearly mcp_m_9_11_yearly                          ///
>                 mcp_f_20_34_yearly mcp_f_35_54_yearly mcp_f_55_74_yearly                         ///
>                 mcp_f_75_plus_yearly mcp_f_pregnant_yearly mcp_f_nursing_yearly          ///
>                 mcp_m_20_34_yearly mcp_m_35_54_yearly mcp_m_55_74_yearly                         ///
>                 mcp_m_75_plus_yearly mcp_fam2_20_54_yearly mcp_fam2_55_plus_yearly       ///
>                 mcp_c_7m_1_yearly mcp_m_20_54_yearly mcp_m_55_plus_yearly                        ///
>                 mcp_f_20_54_yearly mcp_f_55_plus_yearly lib_fam2_20_35_yearly            ///
>                 lib_fam2_55_75_yearly lib_c_u1_yearly lib_f_9_11_yearly                          ///
>                 lib_f_12_14_yearly lib_f_15_19_yearly lib_m_9_11_yearly                          ///
>                 lib_f_20_34_yearly lib_f_35_54_yearly lib_f_55_74_yearly                         ///
>                 lib_f_75_plus_yearly lib_f_pregnant_yearly lib_f_nursing_yearly          ///
>                 lib_m_20_34_yearly lib_m_35_54_yearly lib_m_55_74_yearly                         ///
>                 lib_m_75_plus_yearly lib_fam2_20_54_yearly lib_fam2_55_plus_yearly       ///
>                 lib_c_7m_1_yearly lib_m_20_54_yearly lib_m_55_plus_yearly                        ///
>                 lib_f_20_54_yearly lib_f_55_plus_yearly
.         drop `food_needs_adj' `roundfamsize' `proportionweight' `stateval' `age' ///
>                 `female'
. }

. 
. g foodspend = foodratio_tfp_FoodTotal_FS_SNAP /                                                          ///
>         (pce_food_bea_S / pce_food_bea_US)
(1,342,011 missing values generated)

. tempvar f14

. bysort ID: egen `f14' = mean(foodspend) if inlist(SURVEYYEAR, 2013, 2014, 2015)
(1,735,482 missing values generated)

. replace foodspend = `f14' if SURVEYYEAR == 2014 & foodspend == .
(29,402 real changes made)

. drop `f14'

. label variable foodspend "Total food spending and SNAP relative to TFP needs"

. 
. g lowFN = (foodspend < 1) if foodspend != .
(1,312,609 missing values generated)

. label variable lowFN "Total food spending and SNAP relative less than TFP needs"

. 
. **# Percentile ranks
. ********************************************************************************
. 
. foreach x in latentFS foodspend EARNPOV {
  2.         tempvar xcount xrank
  3.         bysort SURVEYYEAR (ID): egen `xcount' = count(`x') if FamUnit > 0
  4.         bysort SURVEYYEAR (ID): egen `xrank' = rank(`x') if FamUnit > 0
  5.         bysort FID SURVEYYEAR (ID): egen `x'_pr = mean((`xrank' - 0.5) / `xcount')
  6.         drop `xcount' `xrank'
  7. }
(1,303,317 missing values generated)
(1,663,454 missing values generated)
(1,583,190 missing values generated)
(1,303,317 missing values generated)
(1,506,395 missing values generated)
(1,316,930 missing values generated)
(1,303,317 missing values generated)
(1,503,490 missing values generated)
(1,311,656 missing values generated)

. 
. **# Aggregating outcomes by generation
. ********************************************************************************
. 
. /* Discrete variables */
. local xlist mglsecure lowsecure vlwsecure childinsecure insufficient_q123        ///
>         insufficient_screen lowFN FOOD01 FOOD02 FOOD03 FOOD04 FOOD05 FOOD06              ///
>         FOOD07 FOOD08 FOOD09 FOOD10 FOOD11 FOOD12 FOOD13 FOOD14 FOOD15 FOOD16    ///
>         FOOD17 FOOD18

. 
. /* Continuous and discrete variables */
. local ylist FSRAW EARNPOV EarnPoverty foodspend latentFS latentFS_pr             ///
>         foodspend_pr EARNPOV_pr `xlist'

. 
. /* Childhood aggregation */
. foreach c in c c0_5 c6_11 c12_17 {
  2.         if ("`c'" == "c") {
  3.                 local ageifs = "AGE >= 0 & AGE < 18"
  4.         }
  5.         else {
  6.                 local a0 = substr("`c'", 2, strpos("`c'", "_") - 2)
  7.                 local a1 = substr("`c'", strpos("`c'", "_") + 1, .)
  8.                 local ageifs = "AGE >= `a0' & AGE <= `a1'"
  9.         }
 10.         /* Any childhood exposure? */
.         foreach x of local xlist {
 11.                 tempvar xc
 12.                 bysort ID (YEAR): egen `xc' = max(`x') if `ageifs' & FamUnit > 0 &       ///
>                         yearcats == 1
 13.                 bysort ID (YEAR): egen Any_`x'_`c' = max(`xc')
 14.                 drop `xc'
 15.         }
 16.         /* Mean childhood exposure */
.         foreach y of local ylist {
 17.                 tempvar yc
 18.                 bysort ID (YEAR): egen `yc' = mean(`y') if `ageifs' & FamUnit > 0 &      ///
>                         yearcats == 1
 19.                 bysort ID (YEAR): egen Mean_`y'_`c' = mean(`yc')
 20.                 drop `yc'
 21.         }
 22.         /* Categorical, partial, or full childhood exposure? */
.         foreach x of local xlist {
 23.                 recode Mean_`x'_c (0 = 0 "None")(1 = 2 "Full")                                           ///
>                         (nonmiss = 1 "Partial"), g(Cat_`x'_`c')
 24.         }
 25. }
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,801,100 missing values generated)
(1,614,465 missing values generated)
(1,800,332 missing values generated)
(1,593,216 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,290 missing values generated)
(1,592,595 missing values generated)
(1,800,290 missing values generated)
(1,592,595 missing values generated)
(1,800,332 missing values generated)
(1,593,216 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,332 missing values generated)
(1,593,216 missing values generated)
(1,800,290 missing values generated)
(1,592,595 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,801,100 missing values generated)
(1,614,465 missing values generated)
(1,800,332 missing values generated)
(1,593,216 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,806 missing values generated)
(1,606,527 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(1,800,808 missing values generated)
(1,606,581 missing values generated)
(81,324 differences between Mean_mglsecure_c and Cat_mglsecure_c)
(45,900 differences between Mean_lowsecure_c and Cat_lowsecure_c)
(14,769 differences between Mean_vlwsecure_c and Cat_vlwsecure_c)
(26,136 differences between Mean_childinsecure_c and Cat_childinsecure_c)
(79,596 differences between Mean_insufficient_q123_c and Cat_insufficient_q123_c)
(13,068 differences between Mean_insufficient_screen_c and Cat_insufficient_screen_c)
(77,706 differences between Mean_lowFN_c and Cat_lowFN_c)
(71,550 differences between Mean_FOOD01_c and Cat_FOOD01_c)
(52,893 differences between Mean_FOOD02_c and Cat_FOOD02_c)
(37,773 differences between Mean_FOOD03_c and Cat_FOOD03_c)
(25,677 differences between Mean_FOOD04_c and Cat_FOOD04_c)
(17,442 differences between Mean_FOOD05_c and Cat_FOOD05_c)
(28,863 differences between Mean_FOOD06_c and Cat_FOOD06_c)
(13,878 differences between Mean_FOOD07_c and Cat_FOOD07_c)
(8,478 differences between Mean_FOOD08_c and Cat_FOOD08_c)
(6,561 differences between Mean_FOOD09_c and Cat_FOOD09_c)
(4,671 differences between Mean_FOOD10_c and Cat_FOOD10_c)
(43,416 differences between Mean_FOOD11_c and Cat_FOOD11_c)
(27,000 differences between Mean_FOOD12_c and Cat_FOOD12_c)
(11,718 differences between Mean_FOOD13_c and Cat_FOOD13_c)
(8,667 differences between Mean_FOOD14_c and Cat_FOOD14_c)
(3,483 differences between Mean_FOOD15_c and Cat_FOOD15_c)
(1,782 differences between Mean_FOOD16_c and Cat_FOOD16_c)
(4,806 differences between Mean_FOOD17_c and Cat_FOOD17_c)
(837 differences between Mean_FOOD18_c and Cat_FOOD18_c)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,764 missing values generated)
(1,723,248 missing values generated)
(1,816,565 missing values generated)
(1,717,632 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,536 missing values generated)
(1,717,092 missing values generated)
(1,816,536 missing values generated)
(1,717,092 missing values generated)
(1,816,565 missing values generated)
(1,717,632 missing values generated)
(1,816,668 missing values generated)
(1,720,656 missing values generated)
(1,816,668 missing values generated)
(1,720,656 missing values generated)
(1,816,565 missing values generated)
(1,717,632 missing values generated)
(1,816,536 missing values generated)
(1,717,092 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,764 missing values generated)
(1,723,248 missing values generated)
(1,816,565 missing values generated)
(1,717,632 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,665 missing values generated)
(1,720,575 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,662 missing values generated)
(1,720,494 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,663 missing values generated)
(1,720,521 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(1,816,664 missing values generated)
(1,720,548 missing values generated)
(81,324 differences between Mean_mglsecure_c and Cat_mglsecure_c0_5)
(45,900 differences between Mean_lowsecure_c and Cat_lowsecure_c0_5)
(14,769 differences between Mean_vlwsecure_c and Cat_vlwsecure_c0_5)
(26,136 differences between Mean_childinsecure_c and Cat_childinsecure_c0_5)
(79,596 differences between Mean_insufficient_q123_c and Cat_insufficient_q123_c0_5)
(13,068 differences between Mean_insufficient_screen_c and Cat_insufficient_screen_c0_5)
(77,706 differences between Mean_lowFN_c and Cat_lowFN_c0_5)
(71,550 differences between Mean_FOOD01_c and Cat_FOOD01_c0_5)
(52,893 differences between Mean_FOOD02_c and Cat_FOOD02_c0_5)
(37,773 differences between Mean_FOOD03_c and Cat_FOOD03_c0_5)
(25,677 differences between Mean_FOOD04_c and Cat_FOOD04_c0_5)
(17,442 differences between Mean_FOOD05_c and Cat_FOOD05_c0_5)
(28,863 differences between Mean_FOOD06_c and Cat_FOOD06_c0_5)
(13,878 differences between Mean_FOOD07_c and Cat_FOOD07_c0_5)
(8,478 differences between Mean_FOOD08_c and Cat_FOOD08_c0_5)
(6,561 differences between Mean_FOOD09_c and Cat_FOOD09_c0_5)
(4,671 differences between Mean_FOOD10_c and Cat_FOOD10_c0_5)
(43,416 differences between Mean_FOOD11_c and Cat_FOOD11_c0_5)
(27,000 differences between Mean_FOOD12_c and Cat_FOOD12_c0_5)
(11,718 differences between Mean_FOOD13_c and Cat_FOOD13_c0_5)
(8,667 differences between Mean_FOOD14_c and Cat_FOOD14_c0_5)
(3,483 differences between Mean_FOOD15_c and Cat_FOOD15_c0_5)
(1,782 differences between Mean_FOOD16_c and Cat_FOOD16_c0_5)
(4,806 differences between Mean_FOOD17_c and Cat_FOOD17_c0_5)
(837 differences between Mean_FOOD18_c and Cat_FOOD18_c0_5)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,733 missing values generated)
(1,712,988 missing values generated)
(1,815,530 missing values generated)
(1,707,291 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,648 missing values generated)
(1,710,693 missing values generated)
(1,815,648 missing values generated)
(1,710,693 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,500 missing values generated)
(1,706,697 missing values generated)
(1,815,500 missing values generated)
(1,706,697 missing values generated)
(1,815,530 missing values generated)
(1,707,291 missing values generated)
(1,815,648 missing values generated)
(1,710,693 missing values generated)
(1,815,648 missing values generated)
(1,710,693 missing values generated)
(1,815,530 missing values generated)
(1,707,291 missing values generated)
(1,815,500 missing values generated)
(1,706,697 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,733 missing values generated)
(1,712,988 missing values generated)
(1,815,530 missing values generated)
(1,707,291 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,647 missing values generated)
(1,710,666 missing values generated)
(1,815,648 missing values generated)
(1,710,693 missing values generated)
(1,815,648 missing values generated)
(1,710,693 missing values generated)
(81,324 differences between Mean_mglsecure_c and Cat_mglsecure_c6_11)
(45,900 differences between Mean_lowsecure_c and Cat_lowsecure_c6_11)
(14,769 differences between Mean_vlwsecure_c and Cat_vlwsecure_c6_11)
(26,136 differences between Mean_childinsecure_c and Cat_childinsecure_c6_11)
(79,596 differences between Mean_insufficient_q123_c and Cat_insufficient_q123_c6_11)
(13,068 differences between Mean_insufficient_screen_c and Cat_insufficient_screen_c6_11)
(77,706 differences between Mean_lowFN_c and Cat_lowFN_c6_11)
(71,550 differences between Mean_FOOD01_c and Cat_FOOD01_c6_11)
(52,893 differences between Mean_FOOD02_c and Cat_FOOD02_c6_11)
(37,773 differences between Mean_FOOD03_c and Cat_FOOD03_c6_11)
(25,677 differences between Mean_FOOD04_c and Cat_FOOD04_c6_11)
(17,442 differences between Mean_FOOD05_c and Cat_FOOD05_c6_11)
(28,863 differences between Mean_FOOD06_c and Cat_FOOD06_c6_11)
(13,878 differences between Mean_FOOD07_c and Cat_FOOD07_c6_11)
(8,478 differences between Mean_FOOD08_c and Cat_FOOD08_c6_11)
(6,561 differences between Mean_FOOD09_c and Cat_FOOD09_c6_11)
(4,671 differences between Mean_FOOD10_c and Cat_FOOD10_c6_11)
(43,416 differences between Mean_FOOD11_c and Cat_FOOD11_c6_11)
(27,000 differences between Mean_FOOD12_c and Cat_FOOD12_c6_11)
(11,718 differences between Mean_FOOD13_c and Cat_FOOD13_c6_11)
(8,667 differences between Mean_FOOD14_c and Cat_FOOD14_c6_11)
(3,483 differences between Mean_FOOD15_c and Cat_FOOD15_c6_11)
(1,782 differences between Mean_FOOD16_c and Cat_FOOD16_c6_11)
(4,806 differences between Mean_FOOD17_c and Cat_FOOD17_c6_11)
(837 differences between Mean_FOOD18_c and Cat_FOOD18_c6_11)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,339 missing values generated)
(1,728,243 missing values generated)
(1,815,652 missing values generated)
(1,709,478 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,815,630 missing values generated)
(1,709,100 missing values generated)
(1,815,630 missing values generated)
(1,709,100 missing values generated)
(1,815,652 missing values generated)
(1,709,478 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,815,652 missing values generated)
(1,709,478 missing values generated)
(1,815,630 missing values generated)
(1,709,100 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,339 missing values generated)
(1,728,243 missing values generated)
(1,815,652 missing values generated)
(1,709,478 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,071 missing values generated)
(1,721,007 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(1,816,073 missing values generated)
(1,721,061 missing values generated)
(81,324 differences between Mean_mglsecure_c and Cat_mglsecure_c12_17)
(45,900 differences between Mean_lowsecure_c and Cat_lowsecure_c12_17)
(14,769 differences between Mean_vlwsecure_c and Cat_vlwsecure_c12_17)
(26,136 differences between Mean_childinsecure_c and Cat_childinsecure_c12_17)
(79,596 differences between Mean_insufficient_q123_c and Cat_insufficient_q123_c12_17)
(13,068 differences between Mean_insufficient_screen_c and Cat_insufficient_screen_c12_17)
(77,706 differences between Mean_lowFN_c and Cat_lowFN_c12_17)
(71,550 differences between Mean_FOOD01_c and Cat_FOOD01_c12_17)
(52,893 differences between Mean_FOOD02_c and Cat_FOOD02_c12_17)
(37,773 differences between Mean_FOOD03_c and Cat_FOOD03_c12_17)
(25,677 differences between Mean_FOOD04_c and Cat_FOOD04_c12_17)
(17,442 differences between Mean_FOOD05_c and Cat_FOOD05_c12_17)
(28,863 differences between Mean_FOOD06_c and Cat_FOOD06_c12_17)
(13,878 differences between Mean_FOOD07_c and Cat_FOOD07_c12_17)
(8,478 differences between Mean_FOOD08_c and Cat_FOOD08_c12_17)
(6,561 differences between Mean_FOOD09_c and Cat_FOOD09_c12_17)
(4,671 differences between Mean_FOOD10_c and Cat_FOOD10_c12_17)
(43,416 differences between Mean_FOOD11_c and Cat_FOOD11_c12_17)
(27,000 differences between Mean_FOOD12_c and Cat_FOOD12_c12_17)
(11,718 differences between Mean_FOOD13_c and Cat_FOOD13_c12_17)
(8,667 differences between Mean_FOOD14_c and Cat_FOOD14_c12_17)
(3,483 differences between Mean_FOOD15_c and Cat_FOOD15_c12_17)
(1,782 differences between Mean_FOOD16_c and Cat_FOOD16_c12_17)
(4,806 differences between Mean_FOOD17_c and Cat_FOOD17_c12_17)
(837 differences between Mean_FOOD18_c and Cat_FOOD18_c12_17)

. 
. /* Adulthood aggregation */
. 
. /* Any adulthood? */
. foreach x of local xlist {
  2.         tempvar xa
  3.         bysort ID (YEAR): egen `xa' = max(`x') if AGE >= 18 & Adult == 1 &               ///
>                 FamUnit > 0 & yearcats == 3
  4.         bysort ID (YEAR): egen Any_`x'_a = max(`xa')
  5.         drop `xa'
  6. }
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,823,688 missing values generated)
(1,823,688 missing values generated)
(1,749,752 missing values generated)
(1,394,415 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)

. /* Mean adulthood */
. foreach y of local ylist {
  2.         tempvar ya
  3.         bysort ID (YEAR): egen `ya' = mean(`y') if AGE >= 18 & Adult == 1 &              ///
>                 FamUnit > 0 & yearcats == 3
  4.         bysort ID (YEAR): egen Mean_`y'_a = mean(`ya')
  5.         drop `ya'
  6. }
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,471 missing values generated)
(1,392,660 missing values generated)
(1,749,471 missing values generated)
(1,392,660 missing values generated)
(1,749,752 missing values generated)
(1,394,415 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,750 missing values generated)
(1,394,388 missing values generated)
(1,749,471 missing values generated)
(1,392,660 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,823,688 missing values generated)
(1,823,688 missing values generated)
(1,749,752 missing values generated)
(1,394,415 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)
(1,749,574 missing values generated)
(1,395,387 missing values generated)

. 
. /* Mean control variables in adulthood */
. local xlist AGE AGE2 PAGE PAGE2 AGE_h AGE_h2 spm_historical_under100_S           ///
>         unemployment_rate_S FEMALE BlackNonHispanic OtherNonHispanic Hispanic    ///
>         RaceEthnicity_imputed NC1 NC2 NC3 NC4

. foreach x of local xlist {
  2.         bysort ID (YEAR): egen m_`x' = mean(`x') if touse_ad == 1 & yearcats == 3
  3. }
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,813 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)
(1,814,781 missing values generated)

. bysort ID (YEAR): egen m_WT = mean(CLWT) if touse_ad == 1 & yearcats == 3
(1,814,781 missing values generated)

. 
. /* First childhood observation, around 1997 */
. foreach x in mglsecure lowsecure vlwsecure {
  2.         tempvar x97
  3.         g `x97' = `x' if AGE >= 0 & AGE < 18 & FamUnit > 0 & SURVEYYEAR == 1997
  4.         bysort ID: egen FS_`x'_1997 = max(`x97')
  5.         drop `x97'
  6. }
(1,819,300 missing values generated)
(1,705,212 missing values generated)
(1,819,300 missing values generated)
(1,705,212 missing values generated)
(1,819,300 missing values generated)
(1,705,212 missing values generated)

. foreach y in lnEARNPOV foodspend lowFN {
  2.         tempvar y97
  3.         g `y97' = `y' if AGE >= 0 & AGE < 18 & FamUnit > 0 &                                     ///
>                 inrange(SURVEYYEAR, 1995, 1997)
  4.         bysort ID: egen `y'3_1997 = max(`y97')
  5.         drop `y97'
  6. }
(1,802,168 missing values generated)
(1,583,604 missing values generated)
(1,802,702 missing values generated)
(1,585,872 missing values generated)
(1,802,702 missing values generated)
(1,585,872 missing values generated)

. 
. **# Policy instrument variables
. ********************************************************************************
. 
. preserve

.         use "C:\Users\rh2845\Documents\GitHub\PSID\panel_external_data.dta", clear
(State-level external policy and macroeconomic data [panel])

.         keep STATEFIPS YEAR *ssgi_S pai_S REGION liuic_pct_ukcpr_S ///
>                 gini_coef_est_cspp_S incshare_top10_est_cspp_S grogger3_wr_S ///
>                 highbene_wr_S generous_wr_S early_wr_S unemployment_rate_S ///
>                 spm_historical_child_under200_S spm_historical_child_under100_S ///
>                 snap_*_index_? *_usda_S

.         vlist *

.         local usingvars `r(vlist)'

.         sort STATEFIPS YEAR

.         tempfile ext

.         save `ext'
file C:\Users\rh2845\AppData\Local\Temp\ST_4ae0_000002.tmp saved as .dta format

. restore

. 
. sort STATEFIPS YEAR

. merge m:1 STATEFIPS YEAR using `ext', gen(merge_ext) update replace
(label Region already defined)
(label STATEFIPS already defined)
(label vehexclone_la already defined)
(label vehexclall_la already defined)
(label reportsimple_la already defined)
(label oapp_la already defined)
(label fingerprint_la already defined)
(label facerec_la already defined)
(label faceini_la already defined)
(label cap_la already defined)
(label call_la already defined)
(label bbce_inclmt_la already defined)
(label bbce_la already defined)

    Result                      Number of obs
    -----------------------------------------
    Not matched                         6,160
        from master                         0  (merge_ext==1)
        from using                      6,160  (merge_ext==2)

    Matched                         1,823,688
        not updated                   767,858  (merge_ext==3)
        missing updated               270,231  (merge_ext==4)
        nonmissing conflict           785,599  (merge_ext==5)
    -----------------------------------------

. drop if merge_ext == 2
(6,160 observations deleted)

. 
. sum pce_food_bea_US if YEAR == 2019

    Variable |        Obs        Mean    Std. dev.       Min        Max
-------------+---------------------------------------------------------
pce_food_~US |     67,544    101.5283           0   101.5283   101.5283

. g pce_food_state = pce_food_bea_S / `r(mean)'
(7,151 missing values generated)

. 
. g outreach_SPD = (1000 * outreach_usda_S / (population_S / 1000)) /                      ///
>         pce_food_state
(141,949 missing values generated)

. 
. tempvar fnum

. g `fnum' = min(round(FamUnit_NCU18, 1), 3) + 1

. tab `fnum'

   __0000AH |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |  1,309,620       71.81       71.81
          2 |    178,711        9.80       81.61
          3 |    181,112        9.93       91.54
          4 |    154,245        8.46      100.00
------------+-----------------------------------
      Total |  1,823,688      100.00

. g real_snap_bene = ((`fnum' == 1) * snap_1bene_S +                                                       ///
>         (`fnum' == 2) * snap_2bene_S +                                                                           
>         ///
>         (`fnum' == 3) * snap_3bene_S +                                                                           
>         ///
>         (`fnum' == 4) * snap_4bene_S) /                                                                          
>         ///
>         pce_food_state / 1000 if `fnum' != .
(7,151 missing values generated)

. g real_tanf_bene = ((`fnum' == 2) * afdctanf_2bene_S +                                           ///
>         (`fnum' == 3) * afdctanf_3bene_S +                                                                       
>         ///
>         (`fnum' == 4) * afdctanf_4bene_S) /                                                                      
>         ///
>         pce_food_state / 1000 if `fnum' != .
(7,151 missing values generated)

. drop `fnum'

. 
. **# Restrict dataset and define main estimation samples
. ********************************************************************************
. 
. keep if FamUnit > 0 & SURVEYYEAR >= 1997
(1,349,584 observations deleted)

. 
. g all = 1

. label variable all "Full sample: Adults with or without children"

. 
. recode FamUnit_NCU18 (0 = 0)(nonmiss = 1), g(children)
(214,090 differences between FamUnit_NCU18 and children)

. label variable children "Subsample: Adults with children present"

. 
. **# Siblings/Cousins by grandparent
. ********************************************************************************
. 
. sort ID YEAR

. merge m:1 ID using ///
>         "C:\Users\rh2845\Documents\GitHub\PSID\PSID_siblings_cousins.dta"

    Result                      Number of obs
    -----------------------------------------
    Not matched                       360,472
        from master                   359,888  (_merge==1)
        from using                        584  (_merge==2)

    Matched                           114,216  (_merge==3)
    -----------------------------------------

. drop if _merge == 2
(584 observations deleted)

. drop _merge

. 
. foreach i in Siblings Cousins Siblings_Cousins {
  2.         encode All_`i'_ID, g(`i')
  3. }

. 
. **# Instrumental variables: Policy means during childhood
. ********************************************************************************
. 
. local pol real_snap_bene real_tanf_bene snap_eli_cit_usda_S                                      ///
>         snap_tra_oap_usda_S snap_tra_crt_usda_S snap_eli_bbc_usda_S                              ///
>         snap_tra_rep_usda_S snap_eli_veh_usda_S snap_stg_fpr_usda_S                              ///
>         outreach_SPD snap_eli_vex_usda_S snap_stg_ebt_usda_S

. foreach z of local pol {
  2.         tempvar mz
  3.         bysort ID (YEAR): egen `mz' = mean(`z') if FamUnit > 0 & yearcats == 1
  4.         bysort ID (YEAR): egen `z'_c = mean(`mz')
  5.         drop `mz'
  6. }
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)
(401,931 missing values generated)
(106,233 missing values generated)

. 
. **# Main estimation sample definition
. ********************************************************************************
. 
. /* Age profiles */
. local age AGE AGE2 PAGE PAGE2 AGE_h AGE_h2

. 
. /* Control variables */
. local controls spm_historical_under100_S unemployment_rate_S FEMALE                      ///
>         BlackNonHispanic OtherNonHispanic Hispanic RaceEthnicity_imputed                 ///
>         NC1 NC2 NC3 NC4

. 
. /* Mean childhood family earnings-to-poverty ratio and net wealth/equity */
. local pov EarnPoverty_c lnequity_c

. 
. mark touse_sc if touse_ad == 1 & yearcats == 3 & touse_any == 1

. markout touse_sc `age' `controls' `pov' STATEALPHA YEAR Siblings_Cousins

. bysort ID (SURVEYYEAR): egen TOUSE_SC = max(touse_sc)

. 
. mark nouse if yearcats == 3 & inrange(AGE, 18, 35) & Adult == 1 &                        ///
>         FamUnit > 0 & !inlist(CLWT, ., 0) & YOB >= 1985 & YOB <= 1997 &                  ///
>         inlist(SURVEY, 1, 2) & touse_sc == 0

. count if nouse == 1
  5,205

. local nn = r(N)

. qui count if nouse == 1 & CT_X <= 2

. display %6.1f 100 * r(N) / `nn' "%"
   6.5%

. qui count if nouse == 1 & FSRAW == .

. display %6.1f 100 * r(N) / `nn' "%"
  46.7%

. qui count if nouse == 1 & Child_N < 2

. display %6.1f 100 * r(N) / `nn' "%"
   8.9%

. qui count if nouse == 1 & Adult_N < 2

. display %6.1f 100 * r(N) / `nn' "%"
   7.8%

. qui count if nouse == 1 & !(CT_X <= 2 | FSRAW == . | Child_N < 2 | Adult_N < 2)

. display %6.1f 100 * r(N) / `nn' "%"
  39.2%

. clonevar nouse_x = nouse

. replace nouse_x = 0 if CT_X <= 2 | FSRAW == . | Child_N < 2 | Adult_N < 2
(3,167 real changes made)

. markout nouse_x `age' `controls' `pov' STATEALPHA YEAR Siblings_Cousins

. 
. bysort ID (YEAR): egen maxage = max(AGE) if touse_sc == 1
(467,628 missing values generated)

. mark touse_sc_a if touse_sc == 1 & AGE == maxage

. bysort ID (YEAR): egen maxage_c = max(AGE) if touse_sc == 1 & children == 1
(470,728 missing values generated)

. mark touse_sc_ac if touse_sc == 1 & AGE == maxage_c

. 
. xtile EP_c = EARNPOV_c if touse_sc == 1 [aw = CLWT], n(100)

. 
. **# Lee-Solon-type (2009) age adjustment variables
. ********************************************************************************
. 
. local age = 25

. forvalues i = 1/4 {
  2.         
.         /* Quartic on child's recentered age */
.         g CA`i' = (AGE - `age')^`i'
  3.         
.         /* Childhood interactions with quartic age adjustment */
.         foreach x in FSRAW mglsecure lowsecure vlwsecure childinsecure {
  4.                 if ("`x'" == "FSRAW") local a = "Mean"
  5.                 else local a = "Any"
  6.                 g C`i'_`x' = CA`i' * `a'_`x'_c
  7.         }
  8.                 
.         /* Policy interactions with quartic age adjustment */
.         foreach x of local pol {
  9.                 g C`i'_`x' = CA`i' * `x'
 10.                 g C`i'_`x'_c = CA`i' * `x'_c
 11.         }
 12.         
. }
(11 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(11 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(11 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(11 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(336,576 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)
(2,165 missing values generated)
(106,244 missing values generated)

. 
. /* Quartic on mean parent's age during childhood observation years */
. g MA1 = PAGE
(220,232 missing values generated)

. g MA2 = MA1^2
(220,232 missing values generated)

. g MA3 = MA1^3
(220,232 missing values generated)

. g MA4 = MA1^4
(220,232 missing values generated)

. 
. **# Save full version and estimation datasets
. ********************************************************************************
. 
. save "${path}\food_security_v${version}_full_sample.dta", replace
file G:\My Drive\Interchange\Research\FoodSec\food_security_v12_full_sample.dta saved

. 
. preserve

.         keep ID SURVEYYEAR YEAR mglsecure lowsecure vlwsecure childinsecure      ///
>                 FScats FS_???secure_1997 foodspend lnEARNPOV lowFN foodspend3_1997       ///
>                 lnEARNPOV3_1997 lowFN3_1997 AGE AGE2 PAGE PAGE2 AGE_h AGE_h2             ///
>                 spm_historical_under100_S unemployment_rate_S FEMALE                             ///
>                 BlackNonHispanic OtherNonHispanic Hispanic RaceEthnicity_imputed NC1 ///
>                 NC2 NC3 NC4 STATEALPHA FINC000 EARN000 FOOD000 SNAP000 FSSNAP            ///
>                 foodspend lowFN FS_status_1 FS_status_2 FS_status_3 FS_status_4          ///
>                 foodinsecure_children POV LTEHS AGE_h AnyMarried FamUnit_NCU18           ///
>                 BlackNonHispanic WhiteNonHispanic OtherNonHispanic Hispanic              ///
>                 Siblings_Cousins AGE FamUnit yearcats SURVEY CLWT touse_cohort           ///
>                 TOUSE_SC touse_sc children nouse

.         keep if (inlist(SURVEY, 1, 2) & AGE >= 0 & AGE < 18 & FamUnit > 0 &              ///
>                 inlist(yearcats, 1, 3)) | (touse_cohort == 1 & FamUnit > 0 &             ///
>                 SURVEYYEAR > 1997) | (TOUSE_SC == 1 & AGE >= 0 & AGE < 18 &                      ///
>                 FamUnit > 0 & FScats != . & yearcats == 1) | touse_sc == 1 | nouse == 1
(352,064 observations deleted)

.         save "${path}\food_security_v${version}_extended_sample.dta", replace
file G:\My Drive\Interchange\Research\FoodSec\food_security_v12_extended_sample.dta saved

. restore

. 
. keep if touse_sc == 1
(467,628 observations deleted)

. keep ID SURVEYYEAR AGE AGE2 PAGE PAGE2 AGE_h AGE_h2                                                      ///
>         spm_historical_under100_S unemployment_rate_S FEMALE BlackNonHispanic    ///
>         OtherNonHispanic Hispanic RaceEthnicity_imputed NC1 NC2 NC3 NC4                  ///
>         EarnPoverty_c lnequity_c real_snap_bene_c real_tanf_bene_c                               ///
>         snap_eli_cit_usda_S_c snap_tra_oap_usda_S_c snap_tra_crt_usda_S_c                ///
>         snap_eli_bbc_usda_S_c snap_tra_rep_usda_S_c snap_eli_veh_usda_S_c                ///
>         snap_stg_fpr_usda_S_c outreach_SPD_c snap_eli_vex_usda_S_c                               ///
>         snap_stg_ebt_usda_S_c real_snap_bene real_tanf_bene snap_eli_cit_usda_S  ///
>         snap_tra_oap_usda_S snap_tra_crt_usda_S snap_eli_bbc_usda_S                              ///
>         snap_tra_rep_usda_S snap_eli_veh_usda_S snap_stg_fpr_usda_S outreach_SPD ///
>         snap_eli_vex_usda_S snap_stg_ebt_usda_S CA1 CA2 CA3 CA4 MA1 MA2 MA3 MA4  ///
>         FOOD?? Any_FOOD??_c FSRAW latentFS latentFS_pr foodspend_pr                              ///
>         mglsecure lowsecure vlwsecure Any_???secure_c Any_childinsecure_c                ///
>         EARNPOV_pr *LNREALWAGE GOODHEALTH ANYCOLLEGE FSSNAP*                                     ///
>         EP_c EARNPOV_c Any_???secure_c*_* Mean_???secure_c*_* Mean_???secure_c   ///
>         Mean_childinsecure_c Any_childinsecure_c*_* Mean_childinsecure_c*_*              ///
>         Mean_FSRAW_c Mean_FSRAW_a Mean_latentFS_a Mean_latentFS_pr_a                     ///
>         Mean_foodspend_pr_a Any_???secure_a Mean_???secure_a insufficient_screen ///
>         insufficient_q123 Any_insufficient_screen_c Any_insufficient_q123_c              ///
>         Mean_insufficient_screen_c Mean_insufficient_q123_c Cat_???secure_c              ///
>         Mean_latentFS_c Mean_latentFS_pr_c                                                                       
>         ///
>         Mean_foodspend_pr_c C1_* C2_* C3_* C4_* touse_sc touse_sc_a touse_sc_ac  ///
>         all children CLWT m_WT STATEALPHA YEAR Siblings_Cousins m_AGE m_AGE2     ///
>         m_PAGE m_PAGE2 m_AGE_h m_AGE_h2 m_spm_historical_under100_S                              ///
>         m_unemployment_rate_S m_FEMALE m_BlackNonHispanic m_OtherNonHispanic     ///
>         m_Hispanic m_RaceEthnicity_imputed m_NC1 m_NC2 m_NC3 m_NC4

. save "${path}\food_security_v${version}_estimation_sample.dta", replace
file G:\My Drive\Interchange\Research\FoodSec\food_security_v12_estimation_sample.dta saved

. 
. ********************************************************************************
. log close FSEC
      name:  FSEC
       log:  G:\My Drive\Interchange\Research\FoodSec\FSEC_data_20Jun2025_18_21_21.log
  log type:  text
 closed on:  20 Jun 2025, 18:41:28
-------------------------------------------------------------------------------------------------------------------
